<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Aimingoo's Blog]]></title><description><![CDATA[何不乐乐而有哉]]></description><link>http://aimingoo.github.io/</link><image><url>http://aimingoo.github.io/favicon.png</url><title>Aimingoo&apos;s Blog</title><link>http://aimingoo.github.io/</link></image><generator>Ghost 1.14</generator><lastBuildDate>Sun, 15 Oct 2017 08:05:26 GMT</lastBuildDate><atom:link href="http://aimingoo.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[旧文重发：技术高手≠技术领袖]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>此文章来自于F100技术领袖闭门交流期间对我的专访。</p>
<p><em>文字部分有删减，想了解全部采访内容，请在WIFI环境下打开视频。</em></p>
<p>原文可在微信中搜索，视频在这里：[<a href="https://v.qq.com/x/page/t0149mdxvui.html">https://v.qq.com/x/page/t0149mdxvui.html</a>]（<a href="https://v.qq.com/x/page/t0149mdxvui.html%EF%BC%89">https://v.qq.com/x/page/t0149mdxvui.html）</a></p>
<p>@2015-03-26</p>
</blockquote>
<h2 id="">技术高手≠技术领袖</h2>
<blockquote>
<ul>
<li>主持人：什么是技术领袖？</li>
</ul>
</blockquote>
<p>怎么说呢，你首先得说你希望技术领袖起到什么样的作用。一个技术领袖不但要有他的技术特点，或者他所面临的技术领袖的方向、他的人格魅力，也包括他的行事作风等等，还包括你期望这个技术领袖在这样的一个领域，和这样的一个背景下，他能做到什么、能带来什么、能给周边产生的影响，和影响的大小是什么。</p>
<p>如果没有这种预期，纯粹讲一个技术领袖，你就把他命定成了像技术高手这样的角色，其实我觉得不合适。技术领袖一定有他在这个领袖角色上起到的表率作用，起到的领军作用，起到在某一个方向上对这个方向的指导、引领甚至于定义一个领域的作用。有些时候我甚至认为，一个比较好的技术领袖，应该做到的事情是人家想到这个领域，</p></div>]]></description><link>http://aimingoo.github.io/59e3041e72c9e7b37c383212/</link><guid isPermaLink="false">59e3041e72c9e7b37c383212</guid><category><![CDATA[访谈]]></category><category><![CDATA[坐论]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 08:00:02 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>此文章来自于F100技术领袖闭门交流期间对我的专访。</p>
<p><em>文字部分有删减，想了解全部采访内容，请在WIFI环境下打开视频。</em></p>
<p>原文可在微信中搜索，视频在这里：[<a href="https://v.qq.com/x/page/t0149mdxvui.html">https://v.qq.com/x/page/t0149mdxvui.html</a>]（<a href="https://v.qq.com/x/page/t0149mdxvui.html%EF%BC%89">https://v.qq.com/x/page/t0149mdxvui.html）</a></p>
<p>@2015-03-26</p>
</blockquote>
<h2 id="">技术高手≠技术领袖</h2>
<blockquote>
<ul>
<li>主持人：什么是技术领袖？</li>
</ul>
</blockquote>
<p>怎么说呢，你首先得说你希望技术领袖起到什么样的作用。一个技术领袖不但要有他的技术特点，或者他所面临的技术领袖的方向、他的人格魅力，也包括他的行事作风等等，还包括你期望这个技术领袖在这样的一个领域，和这样的一个背景下，他能做到什么、能带来什么、能给周边产生的影响，和影响的大小是什么。</p>
<p>如果没有这种预期，纯粹讲一个技术领袖，你就把他命定成了像技术高手这样的角色，其实我觉得不合适。技术领袖一定有他在这个领袖角色上起到的表率作用，起到的领军作用，起到在某一个方向上对这个方向的指导、引领甚至于定义一个领域的作用。有些时候我甚至认为，一个比较好的技术领袖，应该做到的事情是人家想到这个领域，就认为跟这个人是有关系的。比如说想到了支付，就应该跟什么领域、跟什么人有关系，那这个人就应该是那样的一个技术领袖角色，因为他代表了这个东西。比如说讲到了大数据，讲到了存储，讲到了我们说的其它的任何行业方面，比如说谈到了金融这样的领域，你就想到了这样的一个人，他自然而然就是一个领袖人物。当然他还缺乏一些领袖的职能和作用，那是另外一回事，他已经产生了这样的领袖的能力。</p>
<h2 id="">技术领袖的价值=视野+判断</h2>
<p>我记得我跟高焕堂老师曾经聊过这样的一个话题。高焕堂老师说，在一支军队里面，有好几种人，第一种人就是像在一个小部队中前面领头的那个人物，他可能是一个排头兵，也可能是一个排长、连长，就是这样的人。这样的人算不算是我们说的技术领袖、领军人物呢？不见得，他可能真的是这个里面最优秀的那个人，最好的那个人，可能是打仗最勇猛的那个人，可能是带这个团队带得最好的那个人，但是他不见得是技术领袖的角色。</p>
<p>其实他可能都不在这个技术队伍里面。那个技术领袖可能正远远地跑到前面，找到一棵树爬到树顶上往前观察；告诉大家那边是河，那边是海，那边有敌人；然后跳下来，再带领大家说我们往这儿走和往那儿走。</p>
<p>接下来的问题在于这群人到底相不相信他，如果不相信他，或者如果相信他，在这里面技术领军人物所起到的作用就不一样。如果存在了相信和不相信的问题，我们就来看到底是什么样子：如果这个人是一个侦察兵——我们命定他的角色就是侦察兵，那么他就只带来一个信息，说那里有A、那里有B、那里有C……他带来了一些信息，这些信息并不做任何的判断，这个是侦察兵所带来的信息。这个人算不上领军人物。问题是这个人跑回来告诉大家说，我们向那个地方前进和我们向那个地方前进，他能告诉你一堆的理由，能告诉你我刚才看到的信息是什么，我从这些信息中推演出来的结果是什么……然后再来告诉大家说：yes，我们该往哪个方向走。</p>
<p>接下来我们看看这支队伍到底对这个领军人物产生了什么依赖？</p>
<p>第一是对他所看到的信息产生了依赖，第二是对他的判断有了依赖。其实领军人物在整个团队里面所带来的东西就是这两种东西，第一是他的视野，第二是他的判断，除此之外，别的都无所谓。</p>
<h2 id="">技术态度=完成</h2>
<blockquote>
<ul>
<li>主持人：如何理解“技术态度”？</li>
</ul>
</blockquote>
<p>做技术都应该有一个对自己职业，或者自己这个角色的态度。但是我们人们往往会把这个东西混杂了，有可能你把对人的个人情绪，比如他的生活态度，或者他对别的人的态度，甚至包括他比如说吃饭穿衣的这种态度，生活品位之类的东西，都放到这个态度里面去。因此，我觉得态度很多的情况下是依赖于一个背景的，就是“你怎么讨论这个人”。</p>
<p>但是你问我的问题是“这个角色的态度”，这就比较麻烦。就像在我看您或者看别人的时候，可能都会有一个“对这个人所表现出来的态度或者状态”的一个感受。但是如果你问一个角色——如果是一个技术角色的技术的态度，我认为只有一点是我非常非常关注的，就是“完成”。什么事情做完，不要半途而废，这个是我最坚持的一个技术的态度。无论如何，这件事把它做完，你从一开始定义要做这件事的时候，就决定要把它做完。哪怕最终的结果是失败，是放弃，你也得告诉自己说，这件事是做完了的；不管这个结果是什么，我不讨论结果的好和坏，我只讨论它的完成状态。（假如）有一天你会告诉老板，说，“对不起老板，这事我们真的做不下去了”。——那么，你真的为你做完了这件事情负责任了没有？你说“我们做不下去了”——这是一个结果，这是一个完成的状态——如果你真的为你说这句话负责任了，那么我也认为你做的是对的。</p>
<p>当然，不一定是说要把它真的终结掉，要达到我们原始拟定目标的状态。不是。你怎么认为它是一个done的状态？你一定要找出足够的理由来证明我已经尽心竭力地把它做到了一个完成的状态。这件事情如果没有，没有这种状态、没有这种工作的背景和心态的话，我觉得那技术角色也就没什么特定的价值了——因为你不可依赖。对整个的产品、公司、业务来讲，对你的依赖最终就是要你有一个结果。其实没有别的，你给我一个结果，或者你发言的时候告诉我这个结果是什么，这个结果你努力地去做了，带领大家去追求了，去把它完成了，做到了一个“完成的状态”交付给大家了，大家都会满意，都会放心。</p>
<p>至于这个done的结果的好和坏是一个质量的判断，不是对这件事的态度的判断。</p>
<h2 id="wiision">Wiision帮我打开一扇门</h2>
<blockquote>
<ul>
<li>主持人：“微尚”俱乐部应该给技术领袖带来什么样的价值？</li>
</ul>
</blockquote>
<p>看别人是怎么做的。</p>
<p>其实每一个人眼界都很有限，生活在自己的圈子里面，生活在周边的一群人的圈子里面，缺乏沟通、交流，有自己的主见——年龄越大主见越强，成见越多。放开了这所有的东西，去看看别人是怎么做的，不评价好坏，不评价别人的对和错，只是看一看，可能都是非常大的收益。</p>
<p>人们往往在工作的状态里面会做的事情就是“判断”——判断的越多，判断的越快……人们越来越习惯于这种判断，而不去思考：你最后做出这个判断之前的那些依据是什么？那些依据是你的历史，是你历史中的所有的对和错。所有的这些东西是——我们有些人把它叫做经验，尽管不完全，但它的确包含了这些东西。</p>
<p>如果我们把这些东西判断的目的性——自己的目的——都摘掉，我们只是看看别人，你就会发现有非常非常多的不同。就像说技术领袖这一件事一样，我们会看到不同风格的技术领袖、不同的做法、不同的别人的判断和别人作事的那些方式方法，又或者说别人围绕这一切的思考。我们在此基础上不加以任何判断，不要以任何的判断形式去吸收它，然后最终形成自己新的思考。</p>
<p>有人会问问题：“你不判断它的好坏，你无法去决策它，最终会是怎么样？”答案会是：原本在这样的一个层面上思考问题的时候，是没有好坏的，只有适应和不适应。你有一天碰到了相应的问题，碰到了相应的领域，碰到了相应的场景，那样的方法可能就是最适应的。你只需要提前知道有那样的方法就行了，你可能知道在那样的方法和那样的背景下面有那样的思考模式，你很容易就跑到那边去了，这是一个眼界的问题。</p>
<p>就像刚才问过那个问题一样，就是两件事情：第一件是我们得相信技术领导者的眼界，第二件我们得相信技术领导者的判断。其实大家都在这里聚在一起，目的是为了扩大大家的眼界，至于判断能力还在领导者个人，还在你最终做判断的那一刹那。</p>
<blockquote>
<p>其它：</p>
<ul>
<li>微尚(Wiision)技术管理学院，是全球范围第一家面向高层技术管理人员继续教育的学术机构。</li>
<li>F100技术领袖闭门交流，即 Fast100 席快速成长的技术团队带头人的新型社区，面向中概股或即将上市的科技型公司的技术副总裁、首席技术官、技术总监、技术委员会主席、技术管理学院院长等。</li>
</ul>
</blockquote>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：周爱民老师最新加入的是一家什么样的创业公司?]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这篇访谈是刚入职Ruff时与公司小朋友（真的不大）做的，所以当然是公关文，不过有些我自己的观点和想法在里面，所以也作为旧文重发出来。</p>
<p>Ruff @2016.04.27</p>
</blockquote>
<p><strong>Ruff ：怎么加入Ruff 的?</strong></p>
<p>最早应该是蒋涛找到我，把我引荐给 Roy。但在引荐之前，其实我见过一次 Roy，是在 Qcon 的大会上，当时是讲师的采访，Roy 做完视频采访就是我，当时我是在等 Roy 采访完。但当时都不熟，Roy 好像刚回来不久，所以我也不知道他，他也不知道我，只是打了个招呼。后来想起这件事，还是算有一点点缘分。所以当蒋涛介绍我给 Roy 的时候，我是知道 Roy 的。</p>
<p>和 Roy 最早聊天的时候，我也没有那种意识说 Roy 要拉我入伙，Roy 只是问了一些当时</p></div>]]></description><link>http://aimingoo.github.io/59e3026172c9e7b37c38320d/</link><guid isPermaLink="false">59e3026172c9e7b37c38320d</guid><category><![CDATA[访谈]]></category><category><![CDATA[程序人生]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 07:59:52 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这篇访谈是刚入职Ruff时与公司小朋友（真的不大）做的，所以当然是公关文，不过有些我自己的观点和想法在里面，所以也作为旧文重发出来。</p>
<p>Ruff @2016.04.27</p>
</blockquote>
<p><strong>Ruff ：怎么加入Ruff 的?</strong></p>
<p>最早应该是蒋涛找到我，把我引荐给 Roy。但在引荐之前，其实我见过一次 Roy，是在 Qcon 的大会上，当时是讲师的采访，Roy 做完视频采访就是我，当时我是在等 Roy 采访完。但当时都不熟，Roy 好像刚回来不久，所以我也不知道他，他也不知道我，只是打了个招呼。后来想起这件事，还是算有一点点缘分。所以当蒋涛介绍我给 Roy 的时候，我是知道 Roy 的。</p>
<p>和 Roy 最早聊天的时候，我也没有那种意识说 Roy 要拉我入伙，Roy 只是问了一些当时 Ruff 采用的一些技术基础或方向性的东西。我当时是以一种顾问的心态来做这些事。我觉得在我的眼光能看到的，我能想到的东西我就和他交流，我尽量理解他的逻辑，他想要做的事情，因为这就是顾问要做的事情，理解客户，帮助客户解决事情，所以我基本就是这样一个模式。</p>
<p>不久之后，Roy 问我有没有合作的机会，但当时我在豌豆荚也没有想要走，我想看豌豆荚接下来会怎么做，我对豌豆荚还有自己想做的事情，又有自己的使命想做，所以也没打算离开。后来见到 DK、郑老师。到了去年年底的时候，我看到 Ruff 发布的一个版本，了解了下进展，但仍然没有想要离开豌豆荚。但去年年底的时候我离职了，准备去做手术，在上海住了一段时间的医院，这样和 DK 的接触就比较多，也对 Ruff 的工作做了很深的了解。后来又不打算做手术了，因为这个缘故，DK 就提出了邀请有没有可能加入 Ruff。</p>
<p>本来我离职时打算休息一段时间，当时我没有特别强的马上工作的意愿，再者是我还不是特别确定接下来想选择什么样的公司，对这个问题考虑的不深，加之我的书也开始动工了，所以，当时这不是选择的最佳时机，但最后还是选择了来 Ruff。也没有什么特别的原因，就是选择了过来，有些时候它没有特别的理由反倒正常。那天我和我老婆说，这是我这么久以来没有特别强烈意愿去选择的一家公司，但也许这是对的呢，因为我以前特别特别强烈想去选择的公司也没见得真的对过。</p>
<p><strong>Ruff ：其实 Ruff 是你来过的最小的公司吧。</strong></p>
<p>规模上来说，这确实是我去的最小的公司，但质量很高。</p>
<p><strong>Ruff ：当初听到 Ruff 要做的项目时，你是怎么看的呢？</strong></p>
<p>我第一次见这个 Ruff 开发板的时候，是 DK 把它给我的时候，我突然有种感觉，就是特别好。此前我和 DK、Roy 聊天时聊各种，总觉得很虚，看不到这群人干的事到底是什么样子的，他给我看 Ruff OS 项目，怎么去建设项目的过程我都能够看，但总是让我感觉飘在物联网上面一层的服务提供者，就是那种感觉。但当拿到 Ruff 开发板时，我盯着那块开发板看了很久，我就在想这块板子上延伸出的各个管脚会是什么样的，延伸出来的那些线会是什么样子的，它可能还会插一个什么东西上去，变成一个什么东西。就在那会儿突然对未来的想法就立体了。</p>
<p>所以我觉得是 Ruff 的无限可能性吸引到了我。在看到这块板子之前，我是没有这样的感觉的。这么些年毕竟还是碰了一些硬件，但当拿到那块板子的时候跟我以前的感觉是不一样的，这块板子就像是积木可以拼来拼去一样，它的灵活性和可扩展性是让我感触特别深的。Ruff 给我的感觉是可定制的，它可以变成你想要的东西。</p>
<p>对于Ruff，你知道它现在看起还不是任何的东西，但你就是感觉得到自己知道它将来是什么，因为那是你将来可以变成的，你可以一点点把它变成你将来要的那个东西，就有那种感觉。所以 DK 当时给我看了那款板子，真的是一个很明智的选择。否则我没有那么很明显的感觉。</p>
<p><strong>Ruff ：对于“用软件定义硬件”这句话怎么看?</strong></p>
<p>我有听过这句话，但以前没思考过，我觉得我可能会选择不说这样的话，一个原因是我是做软件的，从我个人经历来讲，本位思想是最可怕的思想之一，就是做什么就站在自己的角度说话。所以，如果我是做硬件的，那么说这句话会更有力量。如果我要把它变成一个理想的话，就是我们希望有一天做硬件的能说这句话就对了，现在我们自己说这句话不够有力。</p>
<p><strong>Ruff ：您怎么看软件工程师着手硬件项目开发呢？</strong></p>
<p>帮做硬件的人做软件，帮做软件的人做硬件，让硬件开发更简单，这个 Roy 和我提到过，这个是 Ruff 提出的最原始想法，就是能介于二者之前可以提供一个桥梁。其实我以前不能够把这个点具象化，我是想不到的，因为我的背景毕竟还是太过趋向于软件，反正总而言之就是一点：当我碰到这块硬件的时候，我对这个想法是有改观的，我认为也许在做的这件事的方向是正确的。应该这么说，我之前知道它是对的，但我不能判断它是正确的，你能理解这中间的细小的差别吗？这是我以前的想法，但当我拿到这款板子的时候，我觉得它可能是正确的。</p>
<p><strong>Ruff ：对于物联网的怎么理解 ？</strong></p>
<p>你把所有的设备都想象成一个控制单元，那么所谓物联网的核心本意，就并不是拿根绳子把洗衣机跟电风扇捆在一起，不是这样的，这种原始而直觉性的思维会让人无法接受，但如果从理工的角度来说，你想象成两块片子之间可以通信就完事了。就到这个层面就可以理解接受了，所谓物联网，无非是这些设备的控制单元上是可以相互通信的，完了，就这样，这个物联网就可以成为我们脑袋中可以计算的实体了。他们外在没有关联，只是芯片、设备或板子直接完成了通信。当然，这之间的语义和有效性是你需要去保障的。</p>
<blockquote>
<p>Ruff:</p>
<p>从1996年起开始涉足商业软件开发，1997年以专职程序员身份开始做开发，期间还做过市场，成为公司西南区域的总经理，但最后还是选择了做开发，成为互联网事业部负责人。再到后来加入盛大、支付宝、豌豆荚，以及现在的 Ruff 。无论写书或者对事业的选择，他的每次选择都是一次从兴趣出发之旅。</p>
<p>对于选择，周爱民是这么说的：“我愿意选择大家都不太尝试的方向。因为当大家都不太尝试时，这时其实所有人的水平几乎都一样。大家都没有积累的时候，就看谁努力，所以很多时候会去选择大家不太关注，但我对这件事情是很有兴趣的，这样我自己是可以完全投入进去。”</p>
</blockquote>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：真正的架构师是没有title的]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这是2014年图灵社区给我做的一个访谈，当时我到豌豆荚不太久，但也不算初到。</p>
<p>虽然这篇文章是根据访谈内容整理的，但基本上没有什么修改，就是现场的聊天，所以也就是第一直觉的思考和回复——我的意思是这并不是那种文字访谈，容得我去思前想后然后写成文字回复给对方。</p>
<p>本文也可以在这里读到：<a href="http://www.ituring.com.cn/article/120377">http://www.ituring.com.cn/article/120377</a> ，或见于<a href="http://www.ituring.com.cn/book/1508">《码农》第14期</a></p>
<p>@2014-09-17</p>
</blockquote>
<h2 id="">关于选择：“既然我已经答应夫人要走，就不想做别的选择了。”</h2>
<blockquote>
<ul>
<li>问：您从什么时候开始接触编程？</li>
</ul>
</blockquote>
<p>我从1994年的时候开始学习编程，最开始接触电脑是学习WPS，DOS之类的，其中有一门课程是DBase，这是早期的编程语言。我的专业不是编程，我学的是机械电子。当时我其实更喜欢文学，但是我认为专业作家迟早会被饿死，所以我就选择了计算机，至少搞计算机不会饿死。</p>
<blockquote>
<ul>
<li>问：我发现您的职业经历也很丰富，在成为架构师之前，您好像还获得过Borland公司发的奖？</li>
</ul>
</blockquote>
<p>我在去盛大之前的经历都是在Delphi圈子里，当时Borland一下发了两个奖给我。一个是Borland产品专家奖，因为那个时候我已经出了第一本书《Delphi源代码分析》。那本书是讲Borland产品内核的，从对Delphi的了解程度来讲我是可以拿这个奖的。另外一个奖叫做社区专家奖，这是因为我是Delphi早期社区的活跃者。</p></div>]]></description><link>http://aimingoo.github.io/59e30f5e72c9e7b37c383213/</link><guid isPermaLink="false">59e30f5e72c9e7b37c383213</guid><category><![CDATA[访谈]]></category><category><![CDATA[坐论]]></category><category><![CDATA[程序人生]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 07:59:44 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这是2014年图灵社区给我做的一个访谈，当时我到豌豆荚不太久，但也不算初到。</p>
<p>虽然这篇文章是根据访谈内容整理的，但基本上没有什么修改，就是现场的聊天，所以也就是第一直觉的思考和回复——我的意思是这并不是那种文字访谈，容得我去思前想后然后写成文字回复给对方。</p>
<p>本文也可以在这里读到：<a href="http://www.ituring.com.cn/article/120377">http://www.ituring.com.cn/article/120377</a> ，或见于<a href="http://www.ituring.com.cn/book/1508">《码农》第14期</a></p>
<p>@2014-09-17</p>
</blockquote>
<h2 id="">关于选择：“既然我已经答应夫人要走，就不想做别的选择了。”</h2>
<blockquote>
<ul>
<li>问：您从什么时候开始接触编程？</li>
</ul>
</blockquote>
<p>我从1994年的时候开始学习编程，最开始接触电脑是学习WPS，DOS之类的，其中有一门课程是DBase，这是早期的编程语言。我的专业不是编程，我学的是机械电子。当时我其实更喜欢文学，但是我认为专业作家迟早会被饿死，所以我就选择了计算机，至少搞计算机不会饿死。</p>
<blockquote>
<ul>
<li>问：我发现您的职业经历也很丰富，在成为架构师之前，您好像还获得过Borland公司发的奖？</li>
</ul>
</blockquote>
<p>我在去盛大之前的经历都是在Delphi圈子里，当时Borland一下发了两个奖给我。一个是Borland产品专家奖，因为那个时候我已经出了第一本书《Delphi源代码分析》。那本书是讲Borland产品内核的，从对Delphi的了解程度来讲我是可以拿这个奖的。另外一个奖叫做社区专家奖，这是因为我是Delphi早期社区的活跃者。我去盛大之前面临了两个Offer，一个是Borland China，请我去做产品工程师，一个是盛大的。Borland在中国没有开发，所以他们只好叫做产品工程师，可以理解成售后服务。我当时觉得虽然Borland公司的title可以，但不是我想做的事，所以我决定去盛大。</p>
<blockquote>
<ul>
<li>问：您曾经是一位Delphi专家，也曾作为架构师就职于盛大和阿里巴巴，您职业转换的原因和动机是什么？</li>
</ul>
</blockquote>
<p>我在郑州待了9年，我在那里的最后一份工作是软件部的负责人，带项目兼做开发。我离开郑州的原因其实很简单。当时我有一位非常好的朋友，他也是我的开发团队中的主力工程师。他说他拿到了微软的Offer，想问一下我的意见，我就告诉他：作为朋友我建议你立即去微软，这对你来讲是事业发展的大好机会。他向我提出离职之后，第二天我就向老板提出了离职。那个时候，我突然想明白了一件事，对于软件开发人才来说，郑州不是一个好环境。当我们把一个人培养得很成熟了，他就会受到更大的环境（比如北京）的影响，人才会流失。在郑州这样的环境下搞软件或者软件企业受限太大了，而这样的现实不是我能改变的。我今天会面临朋友的离职，我如果继续在郑州做下去，过一两年还会面临同样的问题。</p>
<p>我开始意识到整个产业环境对局部地方的影响，对于人才的影响，对于公司企业规模的影响。当时我们还在做一些项目，面向移动、金融、电信这些企业。非常明显，我们作为本地企业，拿到的永远都是小骨头。从北京来的其他公司，人没有你多，素质不一定有你高，但是报价会比你高很多。从北京来的公司只要说他们后面有怎样的一家大公司在支持他，他就会拿到比你更大的东西。</p>
<p>离开郑州后，我去了盛大，盛大对于我来说，是作为架构师的第一个阶段。为了处理一些家务事，我2008年离开盛大。2009年去支付宝，2011年8月份左右离开支付宝，因为保密协议的问题我等了一年，没有在工作。</p>
<p>对于选择这件事，（这些年）除了离开郑州之外，我都没有更充分的动机和理由。我从盛大离开是迫不得已，因为有私事必须要处理；从支付宝走的时候是想换一个环境，不想在那样的环境下生活，不想在那样的工作背景里面工作。</p>
<blockquote>
<ul>
<li>问：您能概括讲一下为什么不喜欢那样的环境吗？</li>
</ul>
</blockquote>
<p>这只是诱因，不是结果。我夫人当时在杭州病得特别厉害，她严重失眠，一个多月只能睡到20个小时，基本上每天一个小时都不到，已经抗不住了。我就跟她讲我们回郑州吧，因为我们家安在郑州。之后我们就搬家了，她的病也在渐渐好转。当时阿里金融给了我一个offer，让我去阿里金融做架构。但是既然我已经答应夫人要走，就不想做别的选择了。</p>
<blockquote>
<ul>
<li>问：您来豌豆荚的时候有没有什么特别的原因呢？</li>
</ul>
</blockquote>
<p>我在来到豌豆荚之前也有一些其他的offer，最后促使我选择豌豆荚的原因也很简单。我来豌豆荚面试的时候跟创始团队一起沟通过，我的感觉是他们很诚恳，这种诚恳的具体表现就是：知道就是知道，不知道他会告诉你。你会从他们那里听到：我们正在创业，我们面临了很多的竞争，有些问题我们也许没有想清楚，但是我们需要像你这样的人过来帮助我们一起做事。大多数创始人不会这样做，这样诚恳的人是很难得的，这是我当时很感动的地方。</p>
<p>第二，当时的豌豆荚还有很多事情没有人拎起来做。很多事情就直接打包到一个团队里面，由团队往下推进，或者打包到一件事里面当成一件事做。在我看来整个体系不成形，杂乱无章。我感觉在这样的背景下面有很多架构工作要做，我架构的能力和背景一定能够帮到这家公司，有我施展的地方，于是我就选择了豌豆荚。</p>
<h2 id="title">架构师：“真正的架构师是没有title的。”</h2>
<blockquote>
<ul>
<li>问：您是如何成为一位架构师的？</li>
</ul>
</blockquote>
<p>人生有很多巧合，不一定非得要预测一个途径。我离开郑州的时候就有一份简历是投到盛大的，面试通过之后他们就发了一份offer，上面写了架构师。原因是我在Delphi圈子里比较资深，盛大给我发offer的时候，觉得高级工程师已经不太适合了，就只能是架构师。</p>
<p>我去盛大的时候没有架构师，包括我本人在内没有人知道怎么做架构。当时是2005年，架构师在国内还是比较陌生的名词。CTO给我安排的活儿是希望我能给某个东西做架构，把底层做起来。我到了之后就按照这样的思路去做，按照自己的理解去推进、实施，用了2个多月，初步做出了原型。虽然最后这个数据底层处理系统没有用，但是这个过程让大家看到，架构的做法跟原来的开发方式不太一样。所以他们很快把我调去了盛大机顶盒的系统，做平台架构。在去盛大之前我已经工作9年了，我基本上把过去工作的所有东西全部汇总，变成了我技术架构上的基础。</p>
<p>如果说在我做平台架构之前，已经大概知道如何做架构了，但是什么叫做平台架构还是没人知道的事。那个时候国内可以出来讲平台架构的人还没有几个，相关的理论知识也没有。我该如何定义什么是平台？想要的东西是什么？我怎么去做？我怎么影响那些决策者？我如何把他们想要的东西描绘出来推进下去？所以，做平台架构也是摸索着往前走，在盛大这件事我大概做了两年。后来盛大为未来5到10年规划的是叫做OMMO的大型多人在线游戏项目（也就是后来的“零世界”项目），于是我在盛大工作的最后半年时间，就在做这个项目的平台设计。</p>
<p>那个时候开始，我已经在做架构了，但是没有范本，没有理论和数据告诉我怎么做。我按照自己的想法去实施，按照自己的方法形成自己的体系，不断地去修改、适应它。</p>
<blockquote>
<ul>
<li>问：您对架构的理解经历了几个阶段？</li>
</ul>
</blockquote>
<p>最早的架构师就是某家公司没有合适你的title，就给你一个架构师做。坦率地说，这是很多公司架构师的出处。我在盛大前两个月左右的时候，第一个项目做得不错，正有一点自得，当时被称为盛大首席架构师的一位同事就要离职了。他跟我聊了一件事，他说他其实半年前就想走了，但是CTO找到他说：你看盛大还有很多事情，你也有很多能量没有发挥出来，我们真的不希望你走，接下来你做盛大的首席架构师吧，把你的能力释放下来。他当时觉得可以留下来，等过了半年再来看这事的时候，他突然醒悟了，他说不是公司想要做架构，也不是我能做架构，而是公司想把他留下来，又找不到适合的理由，于是需要一个合适的title把他留住。</p>
<p>我当时听了他的解释就一阵透心凉，我来盛大做架构也是这样的，找不到一个可以给我的title，但是又想把我留到盛大，于是让我来做架构师了。我跟盛大或者整个行业都经历了这样的阶段。架构师就是一个title，为了挽留一些人，或是为了在某些场合下可以跟别人递一张名片。</p>
<p>在盛大做了两年多之后，我进入到第二个阶段，从架构的结果到架构过程的领悟。最早做架构怎么做呢？去Google搜各种各样的架构的文章、各种各样架构的图和材料，例如要做数据的架构只要搜一些国外大公司数据架构的文章和图就行了。我最初的两年时间也经历了这样的过程。最终我从学习架构的做法得到了突然的领悟：如果那些东西是架构，那么它们是怎么得来的？后来《架构之美》这本书出版的时候，我写了一篇序，里面有我关于架构的第一个感悟：架构是一个过程，而非结果。水管滴下来一滴水，从它滴落到裂开的过程，中间有多少形态的变化？大家只会看到水在地上绽开的结果，不会想到在中间的过程是什么。我们只看到了架构师画出来的东西，而如何得到它才是架构师最重要的部分。这是我2008年左右从盛大离开时的感悟。</p>
<p>从支付宝离开的时候，我又感受到了变化。过程即便也是可以被描述和展现的，也不足以说明架构本身，也就是说，这个过程是不具有灵魂的。假设，我是一个老石匠，我有一位学徒小石匠，我雕石狮子的过程他看得清清楚楚，请问他照着我做一遍就可以成为老石匠了吗？这个过程是可以被仿造的，可以被形式化，但是并不具备灵魂。（因此）我的第二个感悟是：过程是不具备灵魂的，真正要学的应该是架构师思考方式。我在《大道至易》里面花了不少工夫去分析架构的过程和结果，但是核心的部分是给大家讲什么是架构的思维，怎么用架构的思维思考。所以后来孟岩写序的时候，说爱民是在用架构的思维看这个，看那个。管理也好，技术也好，架构本身也好，我都是站在架构思维的视角去看的，能够看到这本书的后半部才能把这本书看明白。这是第三个阶段，思考架构在思维阶段怎么形成，而不是怎么把石狮子雕出来，或者雕出来的结果漂不漂亮，这两者已经偏向于末端了。</p>
<blockquote>
<ul>
<li>问：孟岩曾在《大道至易》的序中提出了一个有趣的问题：组织架构跟技术架构之间的搭配如何才是合适的。但是您在书里面并没有深入地讨论这件事。您现在对这个问题有没有更深的理解？</li>
</ul>
</blockquote>
<p>这个问题是没有通解的。任何一个系统，我将要实施的架构和该架构所在的这家公司中间一定存在着整体系统的视角，系统中不同的东西肯定会有矛盾和冲突。这种矛盾和冲突在不同的背景下表现是不一样的。这个东西本身没有通解，但是问题是完全一致的：如何能让你实施的架构跟这家公司的组织结构及其推动方法协调。你要么改变A，要么改变B，采用的手法是在实施的技术架构上做调整。</p>
<p>举个例子，某个架构的实施需要500人，但是这家公司本来才200人，显然是实施不下去了，但是你还得想办法实现怎么办？你可以去买一个500人实施出来的产品把这个坑填掉，你的架构本身是没有变化的，只是实施的手段变了。第二，我们不要这个架构了，能不能做一个更简洁、轻便，能够适应200人规模的架构。第三，调整公司和架构，这200人不是不够吗？我能不能再买一个500人的公司过来，如果能，我可以把这个放进去。所以调整哪一个都有可能，这是实施手法的问题。</p>
<p>我跟孟岩无法形成共识的问题是：到底什么是冲突的本身？孟岩认为系统可能是不可预设的，也许一开始做架构这件事就错了，因为你预设了系统。而我的观点是系统是可以预设的，我认为架构的发展和需要做的事情是可以按照这个设计往下走的。如果我假设系统可以预设，必然会产生了刚才所讲的矛盾，我们解决矛盾的方法要么是“演化”，要么是“改变”。</p>
<blockquote>
<ul>
<li>问：很有趣的分析。您来到豌豆荚之后遇到最大的技术挑战是什么？</li>
</ul>
</blockquote>
<p>这个问题的答案其实也是我刚才问题的。也就是说，如果技术框架跟公司层面存在了一个矛盾，它会有挑战吗？其实没有。所以在架构的层面讨论刚才的问题，是永远不存在技术障碍的。因为我永远可以有其他选项，我可以不做它，或者我可以不用现在做它，我可以用各种方法把这个问题消化掉。所以如果在架构层面上存在技术挑战或者技术上不可解决的问题，就是你架构做错了，只有架构做错了才会存在这样的矛盾。</p>
<p>所以从技术的角度上讲，总是能够解决，尽管确实永远存在能力的问题。人多了之后就会存在的第二个问题，就是组织问题。人少不存在这样的问题，一个人开发永远不会打架。所以从这个角度考虑，技术上存在的最大挑战往往第一是需要人来解决的部分，我们的人力以及相应的能力不够。第二，人多了之后，存在的管理问题是需要通过非技术方法来解决掉的，比如说组织结构的调整，管理方法等等。</p>
<blockquote>
<ul>
<li>问：如果想从一个普通的程序员成为一位架构师，需要学习什么？</li>
</ul>
</blockquote>
<p>跟你老板搞好关系，让他给你一个title（笑）。</p>
<blockquote>
<ul>
<li>问：那要成为一位真正的架构师呢？</li>
</ul>
</blockquote>
<p>其实真正的架构师是没有title的。首先你要想清楚你在做的东西是不是架构，你是不是会做架构。问题本身就是要让一个愿意学习的同学（不一定是工程师）能够理解到怎样做架构。第一，认识架构最重要的事：你要知道你所面对的是一个系统而不是一件事。你可能每天会面对一堆待处理的事，如果你看到的只是事的过程和结果，而非事情本身，你就仅仅是工程师，一位实施者。跳出这个框子，你面临的其实是一个系统，你看清楚这个系统之后，还要看清楚这个系统里面的关键要素。</p>
<p>我常用过河来作例子。一个人在河的前面想过这条河，有一条船放在那里，如果你认为过河是一件事，你的第一件事是跳到船上想办法把船划过去。你遇到的第一个问题可能是你没有划船的技能。但是如果你是一个架构师，你的第一个问题是：这是什么东西？你可以定义其为一个障碍，河这个东西对你来讲是阻碍，你跨过阻碍的方法不一定是划船。我架一个桥不行吗？我直接跳下去，游泳过去不行吗？另外，这条河是不是障碍还是一个问题，如果它很浅呢？你非要认为它是障碍就制造了矛盾，系统中也许不存在这样的矛盾。</p>
<p>所以从架构思维的角度来讲，第一件事是要看到这是一个系统，第二件事是定义问题，第三件事是看到这个问题是不是真实存在。找到这个问题跟方案之间的关系在哪里，你就会做架构了。</p>
<p>至于做多大范围的架构，就是我在《大道至易》里面提到的领悟、领袖和领域能力的问题了。第一个部分就是领悟的能力，知道划船不是第一要素，思考问题和定义问题以及否定这些问题的整个过程就是架构思维。第二个部分是领域能力的部分，你得知道河流，你得知道船，你得知道桥，这些东西是属于领域的部分。第三部分是领袖能力，你真的想要造一座桥的话，你得组织一群人把桥造出来；如果你们是4、5个人，你的决策是我往上走一公里尝试一下寻找源头，那么你怎么让其他4个人跟着你往那一公里的上游走，这是领袖能力。否则你就会自己变成排头兵，“你们大家等着，我去上游看看”。如果你是领袖的话，可以安排一些人去上游看看，另一些去下游看看，半个小时后在这里集合。这就是领袖，把你设想的解决问题的架构实施下去。</p>
<h2 id="">豌豆荚的动力引擎</h2>
<blockquote>
<ul>
<li>问：您提出的架构师的三种能力（领袖，领域，领悟）反映在您在豌豆荚做架构的过程之中，您更倚重于哪种能力？</li>
</ul>
</blockquote>
<p>我认为是平衡力的问题，不是多少的问题。假设你做技术架构在你的团队使用，你选择了一个插件的框架或者数据流的框架，总共就影响4、5个人，你需要的领袖能力无非是你站起来拍板说我已经调查过的，这个技术绝对没有问题，大公司都已经用过了。这就是你的领袖能力。但是你要想影响到一个行业，比如我们现在正在做的应用内搜索，这是整个行业的一部分，你可能要跳出来说以后整个搜索就是以应用内搜索为核心的，但你怎么能够用领袖能力使得所有人相信将来应用内搜索在这个领域里面是一个方向呢？这就是领袖能力。</p>
<p>你需要在你的能力之间找到一个平衡，而不是考量解决多少问题。领域能力也是如此，所有这部分的能力的要素其实都是可以放在别的角色或者是别人身上的。举个例子，豌豆荚要做应用内搜索，并不等于说CEO需要把应用内搜索所有的领域知识了解得非常清楚。最终他在这个领域的能力是如何构建的呢？是豌豆荚的所有工程师、各个角色在这个领域的集合，支撑了他来讨论应用内搜索可不可以成为行业方向。对于他来讲，这个领域能力就被分解在不同的角色和不同的团队上了。</p>
<p>真正不可或缺的部分变成了领悟能力。比如在决策上豌豆荚为什么要选择应用内搜索作为我们在移动领域上面的方向，在这样的问题上，领悟能力的部分才是架构思索不可或缺的部分。一定要有一个理论体系来支撑这个决策，而其它两个（领域能力和领袖能力）只是在实施手段中所需要找到的、平衡整体能力的部分，可以把它嫁接到别的团队，别的人身上，这会形成一种结构。</p>
<p>我在架构师的能力上面提到的三种能力并不是要集于某一人身上，而是你一定要理解架构所需要的能力，需要多大能力的集合才能把这个系统消化掉。</p>
<blockquote>
<ul>
<li>问：您初到豌豆荚时曾提过您对很多豌豆荚的组织和文化的来源不是很清楚，而您有一个观点是认为组织结构和文化是跟架构有关系的，对这些来源，您现在有没有更清楚？</li>
</ul>
</blockquote>
<p>确实是更清楚了。组织方法和文化氛围的形成，都是有历史渊源的。一个公司如何成长为现在这样？用什么方法来推进它的事和产品？这些都有习惯性的方法和思维在里面。</p>
<p>一家公司做事方法的历史根源，是值得你花一定的时间和精力追本溯源的，有一些信息是需要你去挖掘的，这也是我在豌豆荚一年多的工作里面比较关注的事。豌豆荚因为特别公开、透明，我能够从文档上面看到两三年前，或者是更早时期他们的一些工作过程。这是一个关于信息的问题。</p>
<p>第二部分是文化的形成，这部分不像刚才那么容易。我在《大道至简》那本书里面说到过，一个公司或者一家企业或者一个组织的形成是与那些核心人物有密切关系的，那些创始者和初期团队的构建者的行为、方法、习惯和思维方式都会留下痕迹，这是由人带来的一种气质和影响。所以，更多的是要通过了解这些创始者、创始者团队和早期的团队来理解公司，理解方向，理解他们在做的事业。这个东西不是信息，不是你在过去的文档里面能搜到的东西了，需要你跟他们碰撞、了解、接受、感悟。这一年多以来我在团队融入上的投入使得我能够对豌豆荚的文化和现状有更深的了解。</p>
<blockquote>
<ul>
<li>问：您曾把豌豆荚的组织结构形容为 “开放、透明”，这样的组织对您的技术架构有影响吗？</li>
</ul>
</blockquote>
<p>有影响。不管你怎样做架构，最终是在系统里做实施，这个系统的文化、组织，以及工作方法，一定程度上都影响了你如何去设定这个架构，你不能做出这里面的人无法接受的架构来。一定要掉过头来看这些人习惯并想要用什么样的方法做这些事，在架构实施推进过程中要能够再去调整它。</p>
<p>做架构这件事跟公司的组织和文化有一个漫长的协调过程，你需要在你设定目标和为了达到目标而演化出解决方案的过程中思考。所以一个好的做架构的人一定是对组织、文化、工作方法、项目管理，对整个系统的各个方面都非常了解的，他不一定会做，但是要看到方方面面。</p>
<p>处在扩张阶段的豌豆荚用人需要很大，很多应届毕业生也对豌豆荚很感兴趣，你们需要什么样的年轻开发者？只要有才，唯才是举。首先我觉得要对软件，产品，或者是对你所选择的方向、视野有热心和激情。在一家公司里面不仅仅是要招架构师，也要招软件工程师，各个方向都要招各种各样的人才。人才的定义可能会受到外界的影响，但是由内到外的孜孜不倦的精神，别人一眼就能看得出来。如果你在这件事上具有那样的信心、欲望和力量，这可能会激发每个人的创造力、动力和想要达到一切目标的原始驱动。这是我所希望的定义。</p>
<p>虽然我觉得能力很重要，但是你可以承认自己的不足。我们不会要求刚毕业的学生有多么强的能力，因为这件事本来就不靠谱，我认为在你的背景下面具有合适的能力就行了。拿学生的背景和履历跟经验更丰富的人比较是不公平的。我觉得如果你对自己所做的事，对现有的履历有足够的信心和热情，你愿意去了解豌豆荚并加入到我们的事业里来，这就够了。</p>
<blockquote>
<ul>
<li>问：如果把豌豆荚比喻成一艘大船，您在上面的角色是什么？</li>
</ul>
</blockquote>
<p>一艘船由很多部分组成，船上的所有人都是不可或缺的，抛掉了谁都是不可以的，但同时，也不是缺了谁就不行，不是缺了厨师长大家都没有饭吃，缺了船长就没有人知道方向了。对于我来说，我愿意定义的是我能够做到什么，我的能力是哪个方面，我不想把它拟人化、职务化。</p>
<p>我觉得我应该是动力引擎中的组成部分，因为架构师这个角色所提供的是能力。我不提供这个船的船体，船体不是我工作的目标和对象。也许今天这艘船很小，是一叶扁舟那么小，我也给了它一个超大能力的引擎，有一天当它成长为非常大的船的时候，一样是可以用的。但是如果一开始做得很大的话，这个小舟可能装不下，我愿意做其中的一部分，从小舟开始一直到船非常大的时候都存在，并且起到它的作用，这就够了。我不希望的是，今天我们的引擎是动力0.1版的，只作用于一艘小船，明天我把这个东西扔到海里，换一个大的，那不是我做动力引擎的方法。架构师更倾向于构造一个可扩展的，可以长期影响这个结构的引擎。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：刀与磨刀之二 - 手艺]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>引言：这篇文字其实与“刀与磨刀”没什么关系，只是在与网友聊到磨刀时想起来的旧事罢了，归在这组文章里，算成系列。</p>
<ul>
<li>aimingoo 2016-02-02 01:34于墨尔本</li>
</ul>
</blockquote>
<p>我的父亲做厨三十余年，却是半路出道的。他早先是一个井下的挖煤工人，后来想法子出了矿井调到食堂从杂工做起。早些年，是还讲师徒之道的时候，他是拜了师学过艺，而后来又传过徒弟的。父亲成名时红白两案全通，冷菜热菜皆擅，中餐西点食雕拼盘都自成其道。他后来去正规的培训班考了证，然而惜在文化太低，只能拿得一个三级厨师的证儿。不过放在他那个年代，就是一级厨师也不敢在他面前乱来。</p>
<p>父亲擅长于正统川菜。最特别的是他对农村传统的宴席很精通，那基本上是他的第一任师傅传下来的——可惜这一门，到现在是没人继承了。我在他手边，学会的便只有一件：知道什么是传统川菜，从怎么做到怎么吃，以及怎么变化 ，大多了解。</p>
<p>父亲教了许多徒弟，但惟独没教我哥哥。他觉得自己的孩子自己教不出来，于是送去了给自己的老朋友：陶师。陶师立身正手艺精而且非常尽心。后来我哥哥在他手边学成，考了维扬菜的三级厨师，以后又考了京粤菜的一级厨师，是能在烹饪杂志上一年连发十稿的人。哥哥做菜偏南方，毕竟是扬州菜出身，</p></div>]]></description><link>http://aimingoo.github.io/59e2fca072c9e7b37c383209/</link><guid isPermaLink="false">59e2fca072c9e7b37c383209</guid><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 06:45:05 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>引言：这篇文字其实与“刀与磨刀”没什么关系，只是在与网友聊到磨刀时想起来的旧事罢了，归在这组文章里，算成系列。</p>
<ul>
<li>aimingoo 2016-02-02 01:34于墨尔本</li>
</ul>
</blockquote>
<p>我的父亲做厨三十余年，却是半路出道的。他早先是一个井下的挖煤工人，后来想法子出了矿井调到食堂从杂工做起。早些年，是还讲师徒之道的时候，他是拜了师学过艺，而后来又传过徒弟的。父亲成名时红白两案全通，冷菜热菜皆擅，中餐西点食雕拼盘都自成其道。他后来去正规的培训班考了证，然而惜在文化太低，只能拿得一个三级厨师的证儿。不过放在他那个年代，就是一级厨师也不敢在他面前乱来。</p>
<p>父亲擅长于正统川菜。最特别的是他对农村传统的宴席很精通，那基本上是他的第一任师傅传下来的——可惜这一门，到现在是没人继承了。我在他手边，学会的便只有一件：知道什么是传统川菜，从怎么做到怎么吃，以及怎么变化 ，大多了解。</p>
<p>父亲教了许多徒弟，但惟独没教我哥哥。他觉得自己的孩子自己教不出来，于是送去了给自己的老朋友：陶师。陶师立身正手艺精而且非常尽心。后来我哥哥在他手边学成，考了维扬菜的三级厨师，以后又考了京粤菜的一级厨师，是能在烹饪杂志上一年连发十稿的人。哥哥做菜偏南方，毕竟是扬州菜出身，后来在京粤菜方面又偏创新、偏杂，所以他的手艺传统的少、求变的多。换个角度来看呢，也就欠些厚实。我自己又不习惯南方菜式，所以还是更推崇老爸的菜一些。</p>
<p>做厨这件事，我家是不准我学的。准确的说法，是有一年暑假，我跑去跟老爸商量说要他教几手，结果被他痛斥说我没出息：一家人全学了厨师能顶啥用？于是我一赌气，从此不进厨房，打死也不动案板。以至于有一回老妈让我看着炉子里的稀饭，要煮好了就端下来。我便装模作样地拿了本书在旁边看着书守着，硬生生地让它糊成一锅也当没闻见，虽然被老妈一阵痛骂但也绝了他们让我干点厨房活儿的念头。哈哈哈。</p>
<p>不学厨的那个暑假，便跟了老妈学缝纫——呀，别说，我还真是磨得了刀、捻得起线、穿得了针还写得了程序的多面手呢。话说老妈的缝纫手艺，在十里八乡的还真是出了名的。那个时候正好赶上粮票布票要作废，于是家家都换布作衣，常常是别家裁缝接不到活，而我老妈则带着两三个徒弟还忙不完。最让外人佩服的是，我老妈没文化，大字也不识得一个。然而成衣要量要算，她的算数是我老爸用了两周教会的（要加减乘除外加三角计算的）。老妈聪明，街上有人穿了新衣打她身边一过，她就知道这衣服该怎么裁怎么做；老妈也细致，农家人穿的衣服在哪些地方要多留点，城里小媳妇的裙子哪里要多收点她心里都有算计。这些细处，让她带出来的徒弟都比别人的优秀。</p>
<p>而我从她手边学得的，还真是穿针引线之类的细活儿。衣服破了，我补的补丁针脚都比一般女孩子的手工要齐整：线怎么穿结怎么打，都看得出讲究；连用针，也都是有针法的。这些老妈不常说给我，但我做得不好，她叨叨两句，也总有收获。那年暑假，老妈见我闲得都快去劫银行了，便耐着性子教了教我裁剪。我当时真花了心思去学，但最终却全忘掉了。毕竟我志不在此，那时要学，也不过是跟老爸赌气罢了。</p>
<p>从我父母学艺立业，三十多年过去了。如今，妈妈的手艺失了传，再没几个成衣师傅知道农村人要怎么穿衣才既方便劳作又结实耐看。这也罢了，毕竟这件事多有替代。我更可惜的是那成套成套的农家宴席，现在已经没什么人能做了。而这，便也还罢了吧，毕竟农村人也不再喜欢大鱼大肉的传统吃法。</p>
<p>最可惜的是老爸的那一手传统川菜。例如像鱼香味这等复合味型的菜式，是需要很敏锐的味觉和对食客食材食性的丰富了解才能真正做好的。然而这类的菜型父亲已经不再做了，我们不提，他也不提，只是我们都知道：父亲年纪大了，味觉已经大不如前。</p>
<p>真的是好些年都没有吃到过正宗的鱼香肉丝了啊。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：刀与磨刀之一]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<ul>
<li>aimingoo 2009.07.19</li>
</ul>
</blockquote>
<p>自小喜欢刀。曾经把一根粗钢丝砸成铁片，然后再细细地磨出刃口来，变成像柳叶一样的小刀。也曾经把钢锯条拿去砂轮机上磨、成型，变得像飞镖一样。在印象中，我还曾经做过一套小小的刀，用来雕刻粉笔。想来，如果不是家境不好，可能我自小就变成了雕刻师、刀匠或者刀客。</p>
<p>与刀有缘分，与我的父母亲都有些关系。父亲是厨师，所以常有两三把刀在用着，用来砍的、切的和片的，厚薄形制各各不同。而母亲是裁缝，所以总有一两把剪刀放在成衣案上，除了大小，样式上却没有什么不同。由了这个缘故，家里有一样物事是不缺的，那就是磨石。磨石这个东西有很多种，粗的细的，长形的或卵形的等等。在别的孩子家里少有见过的磨石，有许多我都亲自用过。</p>
<p>母亲忙的时候，剪子就废得快，偶尔便会教我帮她磨。剪子的磨法相当特别，一下一下的，只能顺着推，其间手势还得平顺。剪子的刃口被磨成弧形了，剪子也就没法用了。父亲的刀我则磨得很少，大抵刀太大，父亲怕伤到我。</p>
<p>除了母亲的剪刀，</p></div>]]></description><link>http://aimingoo.github.io/jiu-wen-zhong-fa/</link><guid isPermaLink="false">59e2fcf072c9e7b37c38320c</guid><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 06:44:56 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<ul>
<li>aimingoo 2009.07.19</li>
</ul>
</blockquote>
<p>自小喜欢刀。曾经把一根粗钢丝砸成铁片，然后再细细地磨出刃口来，变成像柳叶一样的小刀。也曾经把钢锯条拿去砂轮机上磨、成型，变得像飞镖一样。在印象中，我还曾经做过一套小小的刀，用来雕刻粉笔。想来，如果不是家境不好，可能我自小就变成了雕刻师、刀匠或者刀客。</p>
<p>与刀有缘分，与我的父母亲都有些关系。父亲是厨师，所以常有两三把刀在用着，用来砍的、切的和片的，厚薄形制各各不同。而母亲是裁缝，所以总有一两把剪刀放在成衣案上，除了大小，样式上却没有什么不同。由了这个缘故，家里有一样物事是不缺的，那就是磨石。磨石这个东西有很多种，粗的细的，长形的或卵形的等等。在别的孩子家里少有见过的磨石，有许多我都亲自用过。</p>
<p>母亲忙的时候，剪子就废得快，偶尔便会教我帮她磨。剪子的磨法相当特别，一下一下的，只能顺着推，其间手势还得平顺。剪子的刃口被磨成弧形了，剪子也就没法用了。父亲的刀我则磨得很少，大抵刀太大，父亲怕伤到我。</p>
<p>除了母亲的剪刀，以及家里那把劈柴的斧子，我只能磨自己的小刀。小刀的刃口也有特别的磨法，因为刃口薄，所以磨得要慢而轻，重了，刀刃就过火了，也就废了。而且要细磨，除了用细油石之外，最后几遍还可以用粗细不同的纸来磨，效果会相当明显——这样磨得的小刀，可以在作业本的一页纸上，轻轻地片出一层来。</p>
<p>在我十几岁的时候，哥哥辍学跟着父亲学了厨。这时候家境也好了些，父亲的厨技从热菜转到主攻凉菜，包括拼盘、雕刻之类。于是就有一大一小的两套刀具。小的只有三把，都是父亲请人做的。大的则是一整套，从专门的商店买来的。这些雕刀都不大，所以我的磨刀功夫就有了用武之地。但是无论我如何恳求，父亲总是不让我磨那三把小刀。他总说，自己用的刀得要自己来磨。我虽然不解，但也没法子，只好在那一大套的刀具里取了一两把，自己磨来玩儿。</p>
<p>久了，父亲见我实在对刀感兴趣，再加上他自己对一些文字方面的雕刻力不从心，所以便让我在他的一些食雕上刻些文字。我那时候正在练毛笔字，所以手腕上和笔法上还过得去，每每雕完，总是很得父亲赞赏的。再后来，等到学业紧了，实在没工夫做这些事，加上能做食雕的师傅也多了，这件事就渐渐放下了。</p>
<p>再过了些年，我开始在外工作，小刀就成了我生活中不能少掉的几件物事之一。不过再也找不到磨石可用，因为没有家的缘故，不能时时备着。但即使这样，我拿把小刀，随便在门框上、台阶上划拉几下，也比一般人磨得锋利。但是这样的锋利也最终出了问题，有一年我乘飞机便被扣了下来。安检人员说，好在你这刀是单刃的，要是同样大的双刃刀就得视作匕首，要把人给扣留下了。</p>
<p>所以此后就不再带刀。不再有刀，不再有磨石，所以渐渐地忘了这些事情，毕竟我是程序员而不是刀匠。终于的，在来杭州后，我在这新租的房子里又看到一具磨石，细细的水磨油石，感觉相当亲切。那天妻拿着剪刀过来说：这剪子被用坏了，能不能磨磨？于是我拿了磨石，垫上布，湿上水，细细地磨了一阵。一层层的石头如泥一样散开，随着水晕散去，剪刀变得渐渐锋利起来。我用拇指试了试刃口，最后在磨石上划拉了几下，交给了妻。</p>
<p>剪子磨好了，但想了想，就这几分钟，却也是二十来年的工夫呢。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：深夜食味记之五 - 回锅肉]]></title><description><![CDATA[<div class="kg-card-markdown"><ul>
<li>（aimingoo  2016.02.21于上海）</li>
</ul>
<blockquote>
<p>在许多年之前我曾经参加了阿里巴巴在武汉的一次校园招聘，当时面试的一个学生水平确实不错，与我谈起各种技术、方向和方法来都头头是道，从BIOS代码到操作系统的启动代码一直到应用开发的许多问题他都能对答得上，还是计算机学会的一个副主席……</p>
<p>然而，总有什么地方不对。</p>
<p>于是我问了他一个问题：你知道回锅肉是怎么做的吗？他愣了一下。然后从我的眼神中读到“确实是这个问题”的信息之后，便又开始回答下去……过了几分钟，我终于拦住了他，说：我们讨论了很多问题，甚至从计算机谈到了烹饪，然而你知道你的回答中多少是正确的吗？</p>
<p>他喃喃了好久，说：也许，有20%吧。</p>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/R169_1_1.1.181_326X580_1_1.1.181_3744X5616_1_1.1.181_3744X5616.jpg" alt=""></p>
<p>我是很爱吃回锅肉的。而且似乎看起来，川人也很少有不爱吃回锅肉的，其吃相还常常不雅：大块肥肉和着蒜苗、青椒或白菜向嘴里送去，顺便还塞入几口米饭，一副十足的狼吐虎咽模样；贪怀的川人这时也不忘猛呷一口酒，在那酒力与油性中解去一日的劳乏。然而即便如此，连爱美惧胖的女孩子们，却也不太能抵挡住这道菜的诱惑。</p>
<p>这也正代表了这道菜普通、家常而又经典的地位，川人会做饭的，大概都会。我父亲考川菜厨师，这第一道菜就是考回锅肉，</p></div>]]></description><link>http://aimingoo.github.io/59e2f91672c9e7b37c383205/</link><guid isPermaLink="false">59e2f91672c9e7b37c383205</guid><category><![CDATA[深夜食味]]></category><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 06:07:51 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><ul>
<li>（aimingoo  2016.02.21于上海）</li>
</ul>
<blockquote>
<p>在许多年之前我曾经参加了阿里巴巴在武汉的一次校园招聘，当时面试的一个学生水平确实不错，与我谈起各种技术、方向和方法来都头头是道，从BIOS代码到操作系统的启动代码一直到应用开发的许多问题他都能对答得上，还是计算机学会的一个副主席……</p>
<p>然而，总有什么地方不对。</p>
<p>于是我问了他一个问题：你知道回锅肉是怎么做的吗？他愣了一下。然后从我的眼神中读到“确实是这个问题”的信息之后，便又开始回答下去……过了几分钟，我终于拦住了他，说：我们讨论了很多问题，甚至从计算机谈到了烹饪，然而你知道你的回答中多少是正确的吗？</p>
<p>他喃喃了好久，说：也许，有20%吧。</p>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/R169_1_1.1.181_326X580_1_1.1.181_3744X5616_1_1.1.181_3744X5616.jpg" alt=""></p>
<p>我是很爱吃回锅肉的。而且似乎看起来，川人也很少有不爱吃回锅肉的，其吃相还常常不雅：大块肥肉和着蒜苗、青椒或白菜向嘴里送去，顺便还塞入几口米饭，一副十足的狼吐虎咽模样；贪怀的川人这时也不忘猛呷一口酒，在那酒力与油性中解去一日的劳乏。然而即便如此，连爱美惧胖的女孩子们，却也不太能抵挡住这道菜的诱惑。</p>
<p>这也正代表了这道菜普通、家常而又经典的地位，川人会做饭的，大概都会。我父亲考川菜厨师，这第一道菜就是考回锅肉，所以网上的传言不虚。然而这道菜其实并没有“十分标准”的做法，譬如我母亲炒出来，便是另一番味道。</p>
<p>这道菜得先从配菜说起。最经典的配菜是蒜苗，非新鲜肥嫩不用，留杆留叶稍为去尖，切段。至于其它候选的配菜，尚有青椒、白菜（包心菜、莲花白）、大肉椒、尖椒、蒜苔、蕨菜、酸菜、干豇豆、萝卜干等等，实在万无可用时，一方豆腐干或是半卷豆腐皮也是可以的。这配菜虽广，但也就两种用法：若用青椒、肉椒、白菜一类会出水的菜，那么应该晚下一些，略炒过生即可，取其生鲜解油；若是萝卜干、豆腐干之类不出水的，那么可以下得早些，这样配菜吃味较深，余香也厚。这干湿两种配菜的做法，总的来说就是让成菜中油脂红亮，肉片有干香，切不可混入水分。</p>
<p>主菜通常用五花肉、猪腿肉、坐墩儿肉（后腿肉、二刀肉），实在不济，只要肥瘦相连不至于切下断开的一块肥瘦肉即可。先拿水里汆去血水生气，再接着煮至七成熟取出，在冷水里浸一浸，趁外冷内热时下刀切成大片备用。然后用中火起油锅，下肉片后即用剁细的郫县豆瓣、豆豉熬炒，使豆瓣特有的色泽和味道深入肉中，待肉片呈卷窝形状（灯盏窝）时，略施白糖、酱油后马上加入配菜，改为大火翻炒致熟，起锅。</p>
<p>回锅肉的吃口在其绵软。为此，从煮这一道程序就有讲究。所谓七成熟，即通常以筷子能插透瘦肉为准。这基本就是人在咀嚼瘦肉时，其软硬度的最佳口感。肉片入锅至“熬起灯盏窝儿”，这肉片打卷儿时正是肥油将尽，外皮略焦，酥而不硬的状态。这样，再加豆瓣、豆豉，施以配菜增香去腻，加酱油起色，大火翻炒制成后肉片弹性仍在，将肉片夹起，其翻卷中不断抖动，色、香、味、形俱是上乘。由于不加水不出水，所以熬炒之后味道尽渗于肉片之中，各种调料翻覆于肉片之外，味型重而用料省，经济方便着实家常。</p>
<p>回锅肉变化丰富异常，除了配菜的丰富之外，还有加泡菜求酸爽开胃，加尖椒求鲜辣嫩香，以及加花椒、姜片等等口味上的独特调整。此外，还有以旱蒸这样的制法来保留肉鲜，以连山这样的刀法来穷极食欲等等。总之，无论如何改如何变，只要叫着“回锅肉”的名字，得着了这回锅肉“肥而不腻”的好处，便能让食客们远可牵肠挂肚，近则和饭狂啖，闲里就老酒成一席小宴，忙时夹锅盔以佐餐风卷。</p>
<p>想起来在九七年的时候，我曾在成都工作过一年。那时体育学院以西的菊乐路上有一家小店，那老板娘做得一手绝好的连山回锅肉，肉片厚薄恰到好处，真真的巴掌大小却还地道地打着半卷儿，入口时竟然能有化渣之感。再有一两粒豆豉细细地腻在肉片上，余味中品之，油尽而香出，咸苦后甘来……</p>
<p>世间再无此等美味了。</p>
<blockquote>
<p>后续：</p>
<p>引子里讲的这段故事后来是这样的。</p>
<p>我告诉他说：“正好我父亲和哥哥都是厨师，正好我非常了解烹饪，所以关于回锅肉的做法我很清楚，从肉的制作到配料的选择，从味型的调整到吃法讲究等等。我不一定是大家，你也并不一定全都不懂。但是这个问题的意义在于，你对所有问题的答案有多少的‘正确性’是并不了解的，你从未追究过答案的真实，而只在乎答案的获得。原因是你在同学们心目中有较高的地位，在他们看来，你懂得更多、更博学，甚至无所不精。然而为了维护这样的形象，你丢失了对答案的辨别能力以及追求它的欲望。所以，我不能要你。”</p>
<p>他当时真的哭了。</p>
</blockquote>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：深夜食味记之四 - 酸菜魔芋]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>本来有其它两款菜式是列在计划中要写的，但一想到这酸菜，我就满口生津，急不可耐地先下笔了。</p>
<ul>
<li>aimingoo 2016.02.13 深夜于悉尼</li>
</ul>
</blockquote>
<p>魔芋本身就是一种很特别的食材。它用来食用的根茎部分其实毒性很强，是得加石灰水浸煮才能去毒，制成后形如灰褐色的凉粉，这才能用来做菜。其粗敝不可多食，火锅菜中有它，但也不算一道好菜，其它能做的菜式也就稀疏几种。我只在杭州时吃过一味烤鱼，拿它做底，味道算是上佳。另外，川菜有一道名菜“魔芋烧鸭”也是美味，这道菜父亲偶尔也做，我极喜欢吃但却自小被忌口，因为身体虚弱寒重多咳者，不可吃魔芋（另外若有皮肤病者，忌食）。所以在我看来，魔芋烧鸭之难得，便在这魔芋不太多见且又不易吃到。</p>
<p>而这里讲到的酸菜，更是四川北部特有的一种食材：土酸菜。由于传统的四川泡菜也被称为酸菜，故而两物皆有异名：四川泡菜被称为泡酸菜，土酸菜被称为淹酸菜——还有人讹作“腌酸菜”，其实工艺上并非“腌制”，反倒是另一异名“积酸菜”更为恰当。“<a href="http://blog.sina.com.cn/cdyangxiaodong">老杨</a>”在一篇《</p></div>]]></description><link>http://aimingoo.github.io/59e2eecd72c9e7b37c383201/</link><guid isPermaLink="false">59e2eecd72c9e7b37c383201</guid><category><![CDATA[深夜食味]]></category><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 05:57:32 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>本来有其它两款菜式是列在计划中要写的，但一想到这酸菜，我就满口生津，急不可耐地先下笔了。</p>
<ul>
<li>aimingoo 2016.02.13 深夜于悉尼</li>
</ul>
</blockquote>
<p>魔芋本身就是一种很特别的食材。它用来食用的根茎部分其实毒性很强，是得加石灰水浸煮才能去毒，制成后形如灰褐色的凉粉，这才能用来做菜。其粗敝不可多食，火锅菜中有它，但也不算一道好菜，其它能做的菜式也就稀疏几种。我只在杭州时吃过一味烤鱼，拿它做底，味道算是上佳。另外，川菜有一道名菜“魔芋烧鸭”也是美味，这道菜父亲偶尔也做，我极喜欢吃但却自小被忌口，因为身体虚弱寒重多咳者，不可吃魔芋（另外若有皮肤病者，忌食）。所以在我看来，魔芋烧鸭之难得，便在这魔芋不太多见且又不易吃到。</p>
<p>而这里讲到的酸菜，更是四川北部特有的一种食材：土酸菜。由于传统的四川泡菜也被称为酸菜，故而两物皆有异名：四川泡菜被称为泡酸菜，土酸菜被称为淹酸菜——还有人讹作“腌酸菜”，其实工艺上并非“腌制”，反倒是另一异名“积酸菜”更为恰当。“<a href="http://blog.sina.com.cn/cdyangxiaodong">老杨</a>”在一篇《老家的酸水豆腐》中详细写过它的做法：</p>
<blockquote>
<p>在菜园子里摘一些青菜，洗净切细。起一锅水，烧到冒热气的时候，把细菜叶倒进去，翻几个滚，掺一些面水，再翻滚均匀，熄火。舀到旁边的缸里，盖上盖子，一缸酸菜就初步成了。</p>
</blockquote>
<p>这用“面水”的做法很可能是最初起的法子，一般来说却并不这样，而是要掺入“老酸菜水”。这跟泡菜要用“老泡菜水”来做是一个道理：要的是老缸中的那些微生物群，做来方可风味不失。而这“酸菜水”极是奇特，初制时如净水，清澈溢香、温凉不滞；储久后如凝浆，透亮不稠、粘沥不断。</p>
<p>土酸菜的酸度与这储藏的时间有关，通常一天即可，若超过三天便极酸了。我确实不知道能在缸中储藏多久，因为最多三天后我母亲就会把这鲜酸菜捞了出来晾晒。而这晾晒的酸菜也分两种，一种是稍微晾晒之后加盐与辣椒等物再腌的，另一种是干透之后收作干酸菜的。如此一味酸菜便可得三种食材，但无论哪一种，均不同于通常见的南、北酸菜，更与传统四川泡菜迵异。所以这些年在广元市已经将它归为川北特有食材的一种，称为“广元酸菜”。</p>
<p>土酸菜制作中加不得一丁点的油盐佐料，所以成品是纯酸的，它说起来清新爽口，实际上却有一种发酵的酸腐气。在鲜酸菜中，尽管这种酸腐气略淡，但有些人一闻这味便觉恶心难忍，原本就并不是人人都可接受的一款食材。再加上成品超常的酸度，所以使用之前要反复兑入清水并挤干，至酸度适宜方可。而另一边，魔芋的成品绵软入口稍有韧性，但除了略有一些石灰的碱味之外，却是极难入味。所以，酸菜魔芋的做法是采用干烧或炝炒：先下酸菜、豆瓣等料，重油重辣地煸炒香了，再下魔芋段（或片）制熟，最后加些热油略作熬炒。整个过程不加水不加汤，尽量用酸菜中的一点水分来收汁入味并用重油将它裹在魔芋上，以补魔芋自身不入味的缺憾。</p>
<p>酸菜魔芋的特点并不是入口的酸，而是川菜另一层的讲究：香。酸菜是作为类似葱、蒜一般的调料来用的，煸炒便是取其独特的清香味，而其自身的酸味就象催化剂一般极大程度地提升着这种清香的体验。所以一道好的酸菜魔芋当有一种甘洌自然的清香，令人不禁脾胃大开，兴兴然不可扼止，辘辘兮四下盼顾。</p>
<p>一旦让酸菜的香味夺了先，便不至于食之寡淡。所以在三种土酸菜成品中，惟以鲜酸菜烧魔芋最佳，故而必然酸菜是现做现吃为好。如今我在北方已经很少见到魔芋，至于鲜酸菜竟然已有二十余年未曾见过。偏巧这酸菜魔芋，又是要凑齐这两种粗陋少见的食材才能制得的一道美味，所以便确实是不可再得了。</p>
<p>这些日在澳洲过春节，饱了眼福却饿了肚腑。于是乎以小诗一首，纪念一下这连米饭也吃不上的日子吧：吞津饥渴甚，离乡肚腑哀。思味至夜深，奈何无良材。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：深夜食味记之三 - 麻婆豆腐]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>看了前两篇，老哥发来消息说：你这大半夜的，哪里有味可食，不过是想吃又吃不着的幻想嘛！好吧，我承认这个。但也决定写个连他也再吃不到的，来狠狠地馋他一回。</p>
<p>食味实是思味，其实我一早便是知的。</p>
<ul>
<li>aimingoo 2016.02.04 02:00于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/----.jpg" alt=""></p>
<p>小时候在我家的附近便有一家豆腐店，是自家现做现卖的。父亲爱做豆腐，便常常差我和哥哥去买。到店中去买的豆腐与菜场购得的并不一样，区别便在于老板会多问你一句：做啥子用的。正宗的麻婆豆腐要用老嫩适中的豆腐，太老就入不得口，太嫩则成不了型。这个所谓“适中”的度，是父亲与豆腐店老板之间的默契。于是我跟哥哥认认真真地答道：麻婆豆腐。</p>
<p>那时邻里之间都熟，父亲跟豆腐店老板是讲过这道麻婆豆腐的门道的。豆腐要用胆水来点，这样豆腐质感会略粗一点，若用石膏则自然会细一些，但看起来是嫩了却难以入味。而且，胆水用得稍轻一点，点成了老豆腐便粗糙不可用了。接下来，豆浆点出豆花之后，豆渣要细细过滤，可能比平常要略多一道，之后用纱布装起用石块轻压成型。这成型的工夫也讲究得很，太久了豆腐过硬便也不能做麻婆豆腐了。</p>
<p>我们俩个孩子便端着这样一块生生的还蒸腾着热气的豆腐，</p></div>]]></description><link>http://aimingoo.github.io/59e2ee4272c9e7b37c3831fd/</link><guid isPermaLink="false">59e2ee4272c9e7b37c3831fd</guid><category><![CDATA[深夜食味]]></category><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 05:57:22 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>看了前两篇，老哥发来消息说：你这大半夜的，哪里有味可食，不过是想吃又吃不着的幻想嘛！好吧，我承认这个。但也决定写个连他也再吃不到的，来狠狠地馋他一回。</p>
<p>食味实是思味，其实我一早便是知的。</p>
<ul>
<li>aimingoo 2016.02.04 02:00于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/----.jpg" alt=""></p>
<p>小时候在我家的附近便有一家豆腐店，是自家现做现卖的。父亲爱做豆腐，便常常差我和哥哥去买。到店中去买的豆腐与菜场购得的并不一样，区别便在于老板会多问你一句：做啥子用的。正宗的麻婆豆腐要用老嫩适中的豆腐，太老就入不得口，太嫩则成不了型。这个所谓“适中”的度，是父亲与豆腐店老板之间的默契。于是我跟哥哥认认真真地答道：麻婆豆腐。</p>
<p>那时邻里之间都熟，父亲跟豆腐店老板是讲过这道麻婆豆腐的门道的。豆腐要用胆水来点，这样豆腐质感会略粗一点，若用石膏则自然会细一些，但看起来是嫩了却难以入味。而且，胆水用得稍轻一点，点成了老豆腐便粗糙不可用了。接下来，豆浆点出豆花之后，豆渣要细细过滤，可能比平常要略多一道，之后用纱布装起用石块轻压成型。这成型的工夫也讲究得很，太久了豆腐过硬便也不能做麻婆豆腐了。</p>
<p>我们俩个孩子便端着这样一块生生的还蒸腾着热气的豆腐，飞也似地跑回家，眼巴巴地等着父亲执铲做菜。先是用郫县豆瓣煸炒碎肉末的油香升起，继而加清水把这肉香压下拿住，入酱油、盐、白糖等调出色。此时已汁味一体，父亲习惯性地勾一点汤汁在铲边，用手指一沾一尝，一脸满意的神情中已经将豆腐轻轻地滑入锅中。手上轻轻一抖，汤汁沿锅边漫开将豆腐圈了进去。此时再将锅铲探入豆腐下面，轻轻晃几下，让汤汁浸下去。接下来急火猛烧一阵，只见汤汁在豆腐间鼓着泡儿地翻腾着，油色渐收变得鲜亮了起来，然后向炉子里加两小铲煤压住火候，再盖上锅盖让锅里的豆腐细细地收起汁来。又过几分钟，再向锅里兑入芡汁、撒些粗花椒粉，略略翻炒一下即可出锅，入盘之后再撒些葱花就上桌了。</p>
<p>这样一道麻婆豆腐才是极赞的。麻婆豆腐要用花椒，所以自然是麻的，但“麻婆”二字说的却不是这麻味，而是说用芡汁裹在豆腐外面的碎肉，如同麻脸一般。所以，麻并不是第一味，反而这煸炒碎肉末的肉鲜，才是第一味的。煸炒肉末这道工序做不到家，肉味收不到汁里，汁味浸不到豆腐里，还去谈麻婆豆腐麻不麻，就只能当是笑话听了。那豆腐多少是有些豆腥味的，所以若不能收汁入味，麻婆豆腐就会有些生生的豆腥，生腥味在留在了豆腐里，是做豆腐的第一大忌。</p>
<p>麻婆豆腐的第二味才是麻。麻是以嫩入口的，这是很少有人知道的。你看麻味的菜，多是生凉的、白切的、水煮的之类，食材都求的是嫩，麻味若不以嫩入口，就只能单纯地追在其它味型之后做个辅味，毕竟没有人象沾芥末那样去沾着花椒吃东西。所以麻婆豆腐要吃出麻味，前提却是豆腐的嫩。而豆腐的老嫩并不掌握在厨师的手里，而是掌握在做豆腐的老板手上。这关键处，在于豆花的一磨一点、一收一压，这使得豆腐可以嫩到一定程度，而还留有些疏散，这样才能在烹制的时候入得了味，食用的时候觉得出嫩，进而留得住“麻”的味道。</p>
<p>说起这麻味，川菜中有纯麻的，也有名为麻辣而实以辣为第一味的，反倒是麻婆豆腐是少有的以麻味压过辣味的川菜：它先以红亮亮的样子唬着大家以为这是辣味居先，而实底上却是以麻味为主味。当然，这是味型上的说法，若实际做起，你要放多几倍的辣椒，非要让辣味居了先，我也是无话可说的，毕竟麻婆豆腐用的是不太辣的郫县豆瓣，多放些确实辣了却也咸不可食。所以麻婆豆腐中的辣味其实中规中矩，口感温和不辛，并且通常还略略加点糖来调和，生怕它盖住了主味的鲜与麻。</p>
<p>麻婆豆腐是最考川菜厨子的一道菜，因为川菜厨子本身做得再完美也就只能拿五十分，余下的要靠豆腐。像常常说到这道菜的特色之一为“酥”，实际上是豆腐入口的口感，这单单靠厨子做是做不出来的。我听说有人用大豆代替碎肉末来做，以得这酥碎之感的。我想即便可行，也是在得不到一方好豆腐时的权益之计吧。</p>
<p>最后，既然说到这“酥”字，便多谈谈这道菜的吃法。因为吃法是食客行的事，不是厨子做的味，所以多说在这里，便算是篇外之言了。麻婆豆腐因为汁收得久，所以出锅之后豆腐是热透的，而且油又用得厚，所以保温时间长。再加上豆腐本身不易散热，所以“烫”是必然。若豆腐或类似的食材烫嘴且粘，那么就口腹之欲就变成口腹之灾，难以食用了。而麻婆豆腐便巧在这个“酥”字：豆腐入口即烂，这火气便散了去，烫固然还是烫的，但不粘在一处，也不结作一团，口感自然大好。如今很多店里只求“豆腐要细嫩”，换作了内脂豆腐来做这道菜，吃到口中粘软如糕，细食之内中无味，强吞了烧喉灼胸，实如灾难一般。</p>
<p>所以味道归味道，吃法归吃法。厨子要知味，还要知食。不会吃的厨子即便做得到川菜的“色香味俱全”，也是无法让食客满意的。而现如今，我想我父亲即便还做得了这麻婆豆腐的味道，怕会也因为没有了那样生生的、还蒸腾着热气的豆腐，做不成这道经典了吧。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：深夜食味记之二 - 鱼香肉丝]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>在《刀与磨刀：手艺》里提到过鱼香肉丝，于是便有网友问正宗的要怎么做。先得说，我充其量算个知道些门道的食客，下手做却是不会的。所以还是顺着“食味”的路子来聊聊这菜这味，做法上大家看看门道即可，细节莫追哈。</p>
<ul>
<li>aimingoo 2016.02.03 02:00于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/list636022063057877500.jpg" alt=""></p>
<p>印象中的鱼香肉丝经典好吃，但如今我在北方是从来不点这道菜的。因为北方做法已经完全找不到这个菜的特点，总是做成“酸酸甜甜就是我”。而且为了这酸甜的口感，很多的做法都已经简单化到拿点番茄酱加点糖就“调”出来鱼香味了。不过，很多吃惯了这口的，还就喜欢这样子的鱼香肉丝。我倒不是怪这食客的口味，只是说无论如何这也不再是川菜中的鱼香味了，徒用了个名字而已。</p>
<p>鱼香味是种复合味型，也就是能吃到多种的、前后次序的、层次感很强的口味。好的食客是能分出味型的次序的，即使差些，也是分得出鱼香味的各种味别来。</p>
<p>标志着正宗鱼香味的第一味型，其实是鲜。而“鱼香”其实不是入鼻的香味，而是一种如同鱼肉入口的鲜味。再接下来，第二味型是酸，第三味型才是甜。</p></div>]]></description><link>http://aimingoo.github.io/59e2eda072c9e7b37c3831f9/</link><guid isPermaLink="false">59e2eda072c9e7b37c3831f9</guid><category><![CDATA[深夜食味]]></category><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 05:57:15 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>在《刀与磨刀：手艺》里提到过鱼香肉丝，于是便有网友问正宗的要怎么做。先得说，我充其量算个知道些门道的食客，下手做却是不会的。所以还是顺着“食味”的路子来聊聊这菜这味，做法上大家看看门道即可，细节莫追哈。</p>
<ul>
<li>aimingoo 2016.02.03 02:00于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/list636022063057877500.jpg" alt=""></p>
<p>印象中的鱼香肉丝经典好吃，但如今我在北方是从来不点这道菜的。因为北方做法已经完全找不到这个菜的特点，总是做成“酸酸甜甜就是我”。而且为了这酸甜的口感，很多的做法都已经简单化到拿点番茄酱加点糖就“调”出来鱼香味了。不过，很多吃惯了这口的，还就喜欢这样子的鱼香肉丝。我倒不是怪这食客的口味，只是说无论如何这也不再是川菜中的鱼香味了，徒用了个名字而已。</p>
<p>鱼香味是种复合味型，也就是能吃到多种的、前后次序的、层次感很强的口味。好的食客是能分出味型的次序的，即使差些，也是分得出鱼香味的各种味别来。</p>
<p>标志着正宗鱼香味的第一味型，其实是鲜。而“鱼香”其实不是入鼻的香味，而是一种如同鱼肉入口的鲜味。再接下来，第二味型是酸，第三味型才是甜。至于辣与咸，在鱼香味中是佐味之味，适中即可，不算突出。然而即便如此，其辣味也分三道，一是泡椒之辣，二是泡姜之辣，三是豆瓣之辣。而所谓“北方改良型”，其实先是不由分说地去了姜辣。然后由于豆瓣不可不用，而其本身又带红椒的辣味，所以不敢再用青椒。遂取了青色大肉椒代替，青椒之辣也就没了。北方做法上，在这道菜中若用郫县豆瓣，则还有一点川辣尚存，若换作它种，则川菜之“辣”便丧失殆尽了。</p>
<p>正宗鱼香味用泡青椒、泡白姜和郫县豆瓣中的红椒，这三色是常色。而底色是粉白肉丝、玉白笋丝和亮黑的木耳丝，令人有相当强的食欲。三个常色所用的辣，尽管在鱼香肉丝中只是佐味，但说真的少了这层层丰富的辣，吃起来还就少点意思。</p>
<p>然而讨论这鱼香味，若是吃不出第一味型中的“鲜”味来，那才真是失败至极了。所谓“正宗做法”，其难点也就在这一个鲜字上。这作第一主味的鲜味，其实是川味泡菜调出来的。我自己做过正宗的泡菜，让北方人试过也是称赞好吃的。所以川味泡菜不能流行，不是“能不能吃”，而是“会不会做”的问题。川味泡菜有一特殊的做法，是在泡的过程中加两三条小鲫鱼。这个做法，现在已经绝少有人用了，但却还有人谈到，我第一次读到这个的时候，是在胡晓远先生的一篇《吃鱼不见鱼的鱼香肉丝》文章中。</p>
<p>我父亲那代人学厨师傅教的便是这样，泡菜加鱼的做法我父亲也是不用的，但知道这个做法，也讲起过。但之所以“可选不用”的根源，胡晓远先生的这篇文章里约略提到，却没讲透。泡菜中的“加小鲫鱼”并不是为了“还鱼香肉丝一个吃鱼不见鱼的名头”，而只是为了取鱼之鲜。四川泡菜的鲜味很丰富，也有很多种食材可以取鲜，“加鱼尤甚”但并非惟一之选。这也是必用川味泡菜而可选“加小鲫鱼秘制”的原因：不用这种秘制算不得不正宗，但不用川味泡菜，那……无论如何也做不出正宗鱼香味。</p>
<p>这是惟一一讲便透的秘密，其它的制菜调芡之类，反倒平常了。不过泡菜这件事，在不同的制法中也能得到不同的味型，这带来的菜式差异还是很明显的。如果真的感兴趣这个，下手做做吃吃这泡菜，才能找到最适当的那个味来。</p>
<p>总而言之，鱼香是“鲜”味，不是“鱼”味，是这个鱼香味的要点。在这上面，才谈得到酸甜两味。其中的酸是泡菜的本味，是植物蔬菜之味，入口清爽而无醋之糟酿之感。而甜味最绝，它仍是来自前面的鲜味的——就好象好的鸡汤，鲜味之后有种甜，而这种甜是鲜味之后的舌感而不是加糖带来的。所以，鱼香味可以用糖，但甜的本味实来自于鲜，若糖加得重了，也是失败。</p>
<p>再多说一点这川菜。我19岁之后就不在四川了，而能让我回味川菜的，只有三道：鱼香肉丝、麻婆豆腐和回锅肉。其中鱼香肉丝和麻婆豆腐我已经再吃不到正宗的了，惟只剩下回锅肉，因为重油重咸简单直接，厨子们手上不稳也不会被骂，所以反倒常常有得吃。虽离正宗还远，然聊可果腹吧。</p>
<p>父亲也不怎么做麻婆豆腐了。他常说：已经没有像样能做的豆腐了。</p>
</div>]]></content:encoded></item><item><title><![CDATA[旧文重发：深夜食味记之一 - 番茄鸡蛋汤]]></title><description><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这两天深夜没得睡，但空出些时间来跟网友聊聊吃的。老友@韩磊 的#深夜谈吃#已经名声在外，这名头我也不敢再用，于是搞了个#深夜食味记#来写写。这样的深夜怕也没几个，所以写得几篇便是几篇吧。</p>
<ul>
<li>aimingoo 2016.02.02于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/yuan_ae985720321fae27217137626fdc491b.jpg" alt=""></p>
<p>多数人了解的川菜都是道听途说，偶然吃到的，也是坏厨子做坏了的味道。“重油重辣重咸”的川菜特色便是这样的厨子搞出来的。相对应的，有人便把“佐料调味最节约”的好处要归在粤菜里去。然而可有人知道，一个“番茄鸡蛋汤”在好厨师的手里，该是如何做的么？</p>
<p>这个菜在路边小店里常常被叫作“滚蛋汤”，一则是吃到这一道菜差不多就该散席了，另一个原因则是它通常的做法就是鸡蛋打散了下成蛋花，加几片番茄一滚便好。在校园里也多是浑沌沌的一大锅，是用来和饭一吞了事之物。这个菜算不上地道的川菜，而要说它是哪个菜系里的，也难得答上来。所以同一个菜式，便有了不同派别的做法，这与很多人认为的“经典与传统要有定规的做法”不同。</p>
<p>然而我父亲这一辈的川菜厨子里，对这道菜也是有讲究的。假定它就是席上的最后一道菜吧——川菜入席可能有两道汤，</p></div>]]></description><link>http://aimingoo.github.io/59e2e9b272c9e7b37c3831f0/</link><guid isPermaLink="false">59e2e9b272c9e7b37c3831f0</guid><category><![CDATA[诗词文章]]></category><category><![CDATA[杂文]]></category><category><![CDATA[深夜食味]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 15 Oct 2017 05:02:22 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><blockquote>
<p>这两天深夜没得睡，但空出些时间来跟网友聊聊吃的。老友@韩磊 的#深夜谈吃#已经名声在外，这名头我也不敢再用，于是搞了个#深夜食味记#来写写。这样的深夜怕也没几个，所以写得几篇便是几篇吧。</p>
<ul>
<li>aimingoo 2016.02.02于墨尔本</li>
</ul>
</blockquote>
<p><img src="http://aimingoo.github.io/content/images/2017/10/yuan_ae985720321fae27217137626fdc491b.jpg" alt=""></p>
<p>多数人了解的川菜都是道听途说，偶然吃到的，也是坏厨子做坏了的味道。“重油重辣重咸”的川菜特色便是这样的厨子搞出来的。相对应的，有人便把“佐料调味最节约”的好处要归在粤菜里去。然而可有人知道，一个“番茄鸡蛋汤”在好厨师的手里，该是如何做的么？</p>
<p>这个菜在路边小店里常常被叫作“滚蛋汤”，一则是吃到这一道菜差不多就该散席了，另一个原因则是它通常的做法就是鸡蛋打散了下成蛋花，加几片番茄一滚便好。在校园里也多是浑沌沌的一大锅，是用来和饭一吞了事之物。这个菜算不上地道的川菜，而要说它是哪个菜系里的，也难得答上来。所以同一个菜式，便有了不同派别的做法，这与很多人认为的“经典与传统要有定规的做法”不同。</p>
<p>然而我父亲这一辈的川菜厨子里，对这道菜也是有讲究的。假定它就是席上的最后一道菜吧——川菜入席可能有两道汤，一中一后，但不会有前汤。做这道汤，得看前菜是什么。如果前菜太油，这道汤就得淡；前菜若是寡淡，这汤就得做厚一些。以清淡来论，鸡蛋打散下锅，番茄切薄不入锅，用蛋花汤一浇加几粒盐放几点香油就可以上桌，葱花可加可不加，各成味道。若以厚重来做，鸡蛋打散下炒锅用油中火炒成五六分熟，可加少许盐、酱油，然后温水浇下略煮，起锅前加厚番茄片略煮，起锅不再加香油不再用盐。这两类做法顺序和目的都有不同，还有别的许多小细节，又用在不同场合。但总的来说，“汤的清淡与否”，与食客当下的口味与状态是有关的，而不是单纯的节约或不节约佐料。</p>
<p>这其中的讲究，在于川菜讲的是“吃味”，而不是“吃食”。不是说做番茄蛋花汤，就得让食客吃掉一只番茄一只鸡蛋，鸡蛋要几两几钱番茄要红透熟烂之类。并不是这样的。上面说番茄蛋花汤的淡做法，要点在出锅后汤中有番茄的清香，所以番茄是生薄片且不入锅的，这样做来的汤清鲜有生气，是为饱食之后解解油气。而厚做法，则是要留下炒鸡蛋带来的油性，这样可以在喝的时候有一种饱腹感，番茄用厚片并略煮，也是这个目的。这两种做法中，汤都是用来喝，不是用来吃的。油、气、味的控制，是为了宴末的时候，得一余兴余味。</p>
<p>我父亲常说：一菜一味，百菜百味。菜放在席上，菜与菜之间是相互影响口感的，如何调整细节上的做法，使得一道菜呈现出它应有的味道，是很花心思的。仍然以这个蛋花汤为例，开水沸的程度决定了蛋花的细嫩以及番茄的鲜香，这就与火候有关系。而我父亲教徒弟，是连柴灶煤灶如何烧，何时添柴加煤都要教的，连灶的样式我父亲都要指导着泥工师傅去垒。</p>
<p>并不是说非得要这样做灶烧火才能保持传统，只是如今的厨师已经完全不知道这些了，又如何指望他们能用一眼煤气重现这样的手艺呢？</p>
</div>]]></content:encoded></item><item><title><![CDATA[Monster 1.0.6开启的新功能]]></title><description><![CDATA[<div class="kg-card-markdown"><h2 id="">多人博客</h2>
<p>经过几个版本的更新，Monster已经开始有了丰富的功能，这其中就包括对Ghost多人博客的支持。</p>
<p>Monster主要是在<code>updatesite.sh</code>模式中支持多人博客，也就是说这个功能在<code>update</code>模式下可用。当在<code>.monster</code>配置文件的<code>EMAIL</code>参数中使用一个列表，例如：</p>
<ul>
<li><code>EMAIL=(&quot;aiming@gmail.com&quot; &quot;qomo@gmail.com&quot;)</code></li>
</ul>
<p>那么多人博客的模式就自动开启，并在<code>--sync-removed</code>命令中有效。</p>
<blockquote>
<p>注：如果你只是删除post，或更新theme中post的风格，那么由于<code>update</code>模式无法从数据库感知到你的更新，所以就需要使用<code>--sync-removed</code>来强制更新指定用户/多个用户的博客内容。一旦使用该命令，那么也将导致整个的索引页会强制更新（因为上面的操作事实上也意味着全站的posts index pages页发生了变化）</p>
</blockquote>
<h2 id="pages">可定制强制更新的pages列表</h2>
<p>当使用<code>update</code></p></div>]]></description><link>http://aimingoo.github.io/59e22d961369c498d686e75c/</link><guid isPermaLink="false">59e22d961369c498d686e75c</guid><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sat, 14 Oct 2017 17:36:43 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><h2 id="">多人博客</h2>
<p>经过几个版本的更新，Monster已经开始有了丰富的功能，这其中就包括对Ghost多人博客的支持。</p>
<p>Monster主要是在<code>updatesite.sh</code>模式中支持多人博客，也就是说这个功能在<code>update</code>模式下可用。当在<code>.monster</code>配置文件的<code>EMAIL</code>参数中使用一个列表，例如：</p>
<ul>
<li><code>EMAIL=(&quot;aiming@gmail.com&quot; &quot;qomo@gmail.com&quot;)</code></li>
</ul>
<p>那么多人博客的模式就自动开启，并在<code>--sync-removed</code>命令中有效。</p>
<blockquote>
<p>注：如果你只是删除post，或更新theme中post的风格，那么由于<code>update</code>模式无法从数据库感知到你的更新，所以就需要使用<code>--sync-removed</code>来强制更新指定用户/多个用户的博客内容。一旦使用该命令，那么也将导致整个的索引页会强制更新（因为上面的操作事实上也意味着全站的posts index pages页发生了变化）</p>
</blockquote>
<h2 id="pages">可定制强制更新的pages列表</h2>
<p>当使用<code>update</code>模式时，如果一个置为<code>static page</code>的页面是使用动态生成方式来生成的——例如archive页，那么仍然是由于数据库不可感知的缘故，就需要使用<code>--force</code>参数来强制生成。你可以通过一个名为<code>FORCEPAGE_LIST</code>的参数来指定这些页面的列表，该参数也在<code>.monster</code>配置文件中。例如：</p>
<ul>
<li><code>FORCEPAGE_LIST=(&quot;archives-post-second-user/&quot;)</code></li>
</ul>
<p>在这个例子中，由于<code>/archives-post/</code>页总是动态生成的网站归档页，所以它缺省是被Monster内部处理的。但如果是使用多人博客（或者其它原因），那么可能就需要生成多个这样的归档。这“动态生成”就意味着从sqlite数据库中感知不到，所以就需要象上面这样强制定义列表。</p>
<p>与此类似的，由于<code>update</code>模式总是尝试使用short_path，因此缺省情况下会将类似<code>/about/index.html</code>这样的页面处理成<code>/about.html</code>。这在大多数情况下是适用的，但Ghost却默认会将导航栏上的链接转换成<code>/.../</code>这样的格式，也就是说它必须使用<code>/about/index.html</code>。这一类的问题在<code>update</code>模式时必须手工指定，你可以使用类似下面的配置：</p>
<ul>
<li><code>FORCEINDEX_LIST=(&quot;about-second-user&quot;)</code></li>
</ul>
<p>在使用Monster的<code>generate</code>模式时也会有这个问题，这是通过<code>IGNORE_LIST</code>来处理的。事实上<code>makesite.sh</code>模块会将这个列表与<code>FORCEINDEX_LIST</code>列表合在一起，来跳过所有不需要处理——亦即是将会保留index.html文件——的目录。</p>
<h2 id="">搜索功能</h2>
<p>Monster提供一种快速搜索的功能，这可以通过<code>monster search ...</code>来实现。</p>
<p>在Ghost 0.9x版本与1.x版本中的数据库结构并不相同，而Monster会自动识别并处理不同的查询条件。因此，现在开始，你可以简单的了解一下你的Posts中都有些什么了（Monster只搜索Posts的内文，而在Ghost Admin后台上搜索只处理标题）：</p>
<pre><code class="language-bash">&gt; monster search &quot;关键字&quot;
id        slug        created_at           title                                 
--------  ----------  -------------------  --------------------------------------
59dafc1a  1-44        2006-04-16 21:03:00  Qomo OpenProject beta1 精彩图集～
59dafc1a  1-50        2006-10-09 14:23:00  【原创】搞了个NetGear的路由?
...
</code></pre>
<h2 id="shortpath">短路径（Short Path）的规则</h2>
<p>在使用Ghost 0.9x时，数据库中的Post ID是从1开始的自增序的，因此Monster采用的short-path规则是<code>authorId-postId</code>。但从Ghost 1.x开始，数据库中的authrId和postId都不再是自增序的整数了，而是一个长的字符串（从旧数据库中导入的一些数据存在例外）。因此，即使使用Monster的<code>--short-path</code>参数，也无法按旧规则来生成这个名字。</p>
<p>因此从Monster 1.06开始，<code>update</code>模式下的<code>--sync-slug</code>会根据数据库版本来选择如下两种格式之一：</p>
<ul>
<li>在Ghost 1.x中采用<code>postId</code>作为post slug；</li>
<li>在Ghost 0.9x中采用<code>authorId-postId</code>作为post slug。</li>
</ul>
<p>考虑到从0.9x迁移到1.x的情况，<code>--sync-slug</code>不对已经采用了short-path格式的slug再做sync操作——了就是说0.9x已经使用了short-path的post会被忽略。<strong>但在识别这种情况时，只处理authorId&lt;9的情况</strong>，这在一般情况下是够用的。</p>
<h2 id="fastcommands">快速命令（Fast commands）</h2>
<p>Monster为一些常用命令建立了快速命令风格，例如上面的<code>monster search ...</code>。在这种风格中，<code>search</code>并不是一个模式——Monster目前只支持<code>generate/update/preview</code>三种模式。</p>
<p>事实上，<code>monster search ...</code>是等效于<code>monster update --search ...</code>的，从Monster v1.0.5开始就提供了这样的一种快速命令风格，用于简单地执行一些命令开关。虽然目前只有<code>search/list</code>两个，但将来会扩充它。</p>
<h2 id="posts">支持无限数量的Posts</h2>
<p>在早前的Monster脚本中只能处理有限数据的Posts，因为过多的Posts生成特别大的正则表达式，从而导致sed调用失效。在Monster v1.0.6中修正了这个Bug，使得Post会根据标题长度自动计算批次，分批处理，从而实现了对“无限数量”的Posts的支持。</p>
<h2 id="">其它</h2>
<p>Monster从v1.0.5开始就不再需要预先安装Buster了，所以它也不再依赖Python环境——如果你不使用<code>preview</code>功能的话。</p>
<p>你可以使用brew来快速安装Monster：<code>brew install aimingoo/repo/monster</code>。</p>
<p>也可以从Github下载Monster：<a href="https://github.com/aimingoo/monster">https://github.com/aimingoo/monster</a>。</p>
</div>]]></content:encoded></item><item><title><![CDATA[麦秸的垛 - 多人博客上线啦]]></title><description><![CDATA[<div class="kg-card-markdown"><p>麦子的文字写得比我好看，她的博客就叫“麦秸的垛”。</p>
<p>很早就说要把这个博客做成多人博客，其实也一早就做了，只是一直没上线。原因是从旧博客迁移过来的时候，几乎所有的文章都得再按markdown格式重排一遍。这个确实很花时间，比如我的那部分大概做了三个月呢。</p>
<p>所以“麦秸的垛”就一直拖着没上线。</p>
<p>麦子之前在新浪、搜狐和微软MSN上发的博文其实不少，我一次全迁移过来了，也是200多篇呢。所以接下来又得花阵子功夫来做排版了，不过应该会比我的快：毕竟她的博文没代码……</p>
<p>我的文字太硬气，读起来难以让人愉悦，麦子的不会。这个，相信我。</p>
<p>点右上方的链接就好了。</p>
</div>]]></description><link>http://aimingoo.github.io/59df7101a550c258f56eab34/</link><guid isPermaLink="false">59df7101a550c258f56eab34</guid><category><![CDATA[博客]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Thu, 12 Oct 2017 13:42:06 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>麦子的文字写得比我好看，她的博客就叫“麦秸的垛”。</p>
<p>很早就说要把这个博客做成多人博客，其实也一早就做了，只是一直没上线。原因是从旧博客迁移过来的时候，几乎所有的文章都得再按markdown格式重排一遍。这个确实很花时间，比如我的那部分大概做了三个月呢。</p>
<p>所以“麦秸的垛”就一直拖着没上线。</p>
<p>麦子之前在新浪、搜狐和微软MSN上发的博文其实不少，我一次全迁移过来了，也是200多篇呢。所以接下来又得花阵子功夫来做排版了，不过应该会比我的快：毕竟她的博文没代码……</p>
<p>我的文字太硬气，读起来难以让人愉悦，麦子的不会。这个，相信我。</p>
<p>点右上方的链接就好了。</p>
</div>]]></content:encoded></item><item><title><![CDATA[博客中的系列文章]]></title><description><![CDATA[<div class="kg-card-markdown"><h2 id="">【技术类】</h2>
<h3 id="qomo">Qomo技术系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-15/">从基础开始：Qomo OpenProject中的一些关键词</a></li>
<li><a href="http://aimingoo.github.io/1-16/">从基础开始：Qomo OpenProject中的一些关键词(2)</a></li>
<li><a href="http://aimingoo.github.io/1-18/">JavaScript面向对象的支持(1)</a></li>
<li><a href="http://aimingoo.github.io/1-21/">JavaScript面向对象的支持(2)</a></li>
<li><a href="http://aimingoo.github.io/1-22/">JavaScript面向对象的支持(3)</a></li>
<li><a href="http://aimingoo.github.io/1-23/">JavaScript面向对象的支持(4)</a></li>
<li><a href="http://aimingoo.github.io/1-24/">JavaScript面向对象的支持(5)</a></li>
<li><a href="http://aimingoo.github.io/1-26/">JavaScript面向对象的支持(6)</a></li>
<li><a href="http://aimingoo.github.io/1-27/">JavaScript面向对象的支持(7)</a></li>
<li><a href="http://aimingoo.github.io/1-30/">Qomolangma实现篇(一)：内核载入模块system.js的实现</a></li>
<li><a href="http://aimingoo.github.io/1-32/">Qomolangma实现篇(二)：命名空间和别名子系统的实现</a></li>
<li><a href="http://aimingoo.github.io/1-35/">Qomolangma实现篇(三)：兼容层设计</a></li>
<li><a href="http://aimingoo.github.io/1-36/">Qomolangma实现篇(四)：基本特性增强与多投事件系统</a></li>
<li><a href="http://aimingoo.github.io/1-38/">Qomolangma实现篇(五)：Qomo的OOP的语法和类继承体系</a></li>
<li><a href="http://aimingoo.github.io/1-39/">Qomolangma实现篇(六)：Qomo的OOP框架的实现技术</a></li>
<li><a href="http://aimingoo.github.io/1-42/">Qomolangma实现篇(七)：Qomo的接口机制</a></li>
<li><a href="http://aimingoo.github.io/1-43/">Qomolangma实现篇(八)：Qomo中的AOP框架</a></li>
<li><a href="http://aimingoo.github.io/1-47/">Qomolangma实现篇(九)</a></li></ul></div>]]></description><link>http://aimingoo.github.io/1-1747/</link><guid isPermaLink="false">59dafc1a1e9aa777abb0d5c4</guid><category><![CDATA[博客]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 08 Oct 2017 14:29:50 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><h2 id="">【技术类】</h2>
<h3 id="qomo">Qomo技术系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-15/">从基础开始：Qomo OpenProject中的一些关键词</a></li>
<li><a href="http://aimingoo.github.io/1-16/">从基础开始：Qomo OpenProject中的一些关键词(2)</a></li>
<li><a href="http://aimingoo.github.io/1-18/">JavaScript面向对象的支持(1)</a></li>
<li><a href="http://aimingoo.github.io/1-21/">JavaScript面向对象的支持(2)</a></li>
<li><a href="http://aimingoo.github.io/1-22/">JavaScript面向对象的支持(3)</a></li>
<li><a href="http://aimingoo.github.io/1-23/">JavaScript面向对象的支持(4)</a></li>
<li><a href="http://aimingoo.github.io/1-24/">JavaScript面向对象的支持(5)</a></li>
<li><a href="http://aimingoo.github.io/1-26/">JavaScript面向对象的支持(6)</a></li>
<li><a href="http://aimingoo.github.io/1-27/">JavaScript面向对象的支持(7)</a></li>
<li><a href="http://aimingoo.github.io/1-30/">Qomolangma实现篇(一)：内核载入模块system.js的实现</a></li>
<li><a href="http://aimingoo.github.io/1-32/">Qomolangma实现篇(二)：命名空间和别名子系统的实现</a></li>
<li><a href="http://aimingoo.github.io/1-35/">Qomolangma实现篇(三)：兼容层设计</a></li>
<li><a href="http://aimingoo.github.io/1-36/">Qomolangma实现篇(四)：基本特性增强与多投事件系统</a></li>
<li><a href="http://aimingoo.github.io/1-38/">Qomolangma实现篇(五)：Qomo的OOP的语法和类继承体系</a></li>
<li><a href="http://aimingoo.github.io/1-39/">Qomolangma实现篇(六)：Qomo的OOP框架的实现技术</a></li>
<li><a href="http://aimingoo.github.io/1-42/">Qomolangma实现篇(七)：Qomo的接口机制</a></li>
<li><a href="http://aimingoo.github.io/1-43/">Qomolangma实现篇(八)：Qomo中的AOP框架</a></li>
<li><a href="http://aimingoo.github.io/1-47/">Qomolangma实现篇(九)：Qomo中的模板系统</a></li>
<li><a href="http://aimingoo.github.io/1-49/">Qomolangma框架库(一)：概述、工具、异常、调试与分析</a></li>
<li><a href="http://aimingoo.github.io/1-51/">Qomolangma框架库(二)：时间线与时间处理器</a></li>
<li><a href="http://aimingoo.github.io/1-57/">Qomolangma框架库(三)：处理池与处理机</a></li>
</ul>
<h3 id="">“前端要给力”系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-160/">前端要给力之：代码可以有多烂？</a></li>
<li><a href="http://aimingoo.github.io/1-162/">前端要给力之：URL应该有多长？</a></li>
<li><a href="http://aimingoo.github.io/1-163/">前端要给力之：原子，与原子联结的友类、友函数</a></li>
<li><a href="http://aimingoo.github.io/1-164/">前端要给力之：分解对象构造过程new()</a></li>
<li><a href="http://aimingoo.github.io/1-195/">前端要给力之：红绿灯大战中的火星生命-Promise</a></li>
</ul>
<h3 id="android">Android玩乐系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-178/">Android玩乐系列：修改汇编代码支持原生高清来电大头贴（一）</a></li>
<li><a href="http://aimingoo.github.io/1-179/">Android玩乐系列：修改汇编代码支持原生高清来电大头贴（二）</a></li>
<li><a href="http://aimingoo.github.io/1-180/">Android玩乐系列：修改汇编代码支持原生高清来电大头贴（三）</a></li>
</ul>
<h3 id="javascript">JavaScript类型讨论系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-167/">再谈JavaScript的数据类型问题</a></li>
<li><a href="http://aimingoo.github.io/1-168/">三谈类型问题：ECMAScript为什么错了？</a></li>
<li><a href="http://aimingoo.github.io/1-170/">JavaScript类型总览(图)</a></li>
</ul>
<h3 id="">元语言及其应用系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-112/">元语言基础技术之：在JS中如何自由地创建函数</a></li>
<li><a href="http://aimingoo.github.io/1-110/">QoBean的元语言系统（一）</a></li>
<li><a href="http://aimingoo.github.io/1-111/">QoBean的元语言系统（二）</a></li>
<li><a href="http://aimingoo.github.io/1-146/">为脚本语言平反-JavaScript篇（1）</a></li>
<li><a href="http://aimingoo.github.io/1-147/">为脚本语言平反-JavaScript篇（2）</a></li>
<li><a href="http://aimingoo.github.io/1-148/">为脚本语言平反-JavaScript篇（3）</a></li>
</ul>
<h3 id="">设计师的实战过程系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-113/">内训资料公开：设计师的实战过程(1)</a></li>
<li><a href="http://aimingoo.github.io/1-115/">内训资料公开：设计师的实战过程(2)</a></li>
<li><a href="http://aimingoo.github.io/1-116/">内训资料公开：设计师的实战过程(3)</a></li>
</ul>
<h2 id="">【论谈类】</h2>
<h3 id="">我读《人月神话》系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-63/">杀不死的人狼——我读《人月神话》（一）</a></li>
<li><a href="http://aimingoo.github.io/1-64/">杀不死的人狼——我读《人月神话》（二）</a></li>
<li><a href="http://aimingoo.github.io/1-65/">杀不死的人狼——我读《人月神话》（三）</a></li>
<li><a href="http://aimingoo.github.io/1-66/">杀不死的人狼——我读《人月神话》（四）</a></li>
<li><a href="http://aimingoo.github.io/1-67/">杀不死的人狼——我读《人月神话》（五）</a></li>
</ul>
<h3 id="">《大道至简》的幕后故事系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-70/">《大道至简》的幕后故事(1)</a></li>
<li><a href="http://aimingoo.github.io/1-71/">《大道至简》的幕后故事(2)：“愚公移山记”人物篇</a></li>
<li><a href="http://aimingoo.github.io/1-72/">《大道至简》的幕后故事(3)：“愚公移山记”事物篇</a></li>
<li><a href="http://aimingoo.github.io/1-73/">《大道至简》的幕后故事(4)：“愚公移山记”军事地理篇</a></li>
<li><a href="http://aimingoo.github.io/1-74/">《大道至简》的幕后故事(5)：“愚公移山记”军事谋略篇</a></li>
<li><a href="http://aimingoo.github.io/1-75/">《大道至简》的幕后故事：终结篇、勘误和PDF下载</a></li>
</ul>
<h3 id="vclrad">“VCL已死，RAD已死”系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-123/">VCL已死，RAD已死(1)</a></li>
<li><a href="http://aimingoo.github.io/1-124/">VCL已死，RAD已死(2)</a></li>
<li><a href="http://aimingoo.github.io/1-125/">VCL已死，RAD已死(3)</a></li>
<li><a href="http://aimingoo.github.io/1-126/">VCL已死，RAD已死(插播)</a></li>
<li><a href="http://aimingoo.github.io/1-129/">VCL已死，RAD已死(4)</a></li>
<li><a href="http://aimingoo.github.io/1-130/">关于“VCL已死、RAD已死”答读者问</a></li>
<li><a href="http://aimingoo.github.io/1-131/">VCL已死，RAD已死(5)</a></li>
<li><a href="http://aimingoo.github.io/1-132/">VCL已死，RAD已死(6) - 结语与预测</a></li>
</ul>
<h3 id="">《大道至易：实践者的思想》第二版发布小述系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-1735/">电子书《我的架构思想》小述</a></li>
<li><a href="http://aimingoo.github.io/1-1734/">电子书《程序原本》小述</a></li>
<li><a href="http://aimingoo.github.io/1-1736/">小述系列最终篇：说说《大道至易：实践者的思想》</a></li>
</ul>
<h3 id="oschina">OSCHINA答读者问系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-186/">OSCHINA答读者问之一：“软件工程”的学法与用法</a></li>
<li><a href="http://aimingoo.github.io/1-187/">OSCHINA答读者问之二：什么是架构？以及什么是架构师？</a></li>
<li><a href="http://aimingoo.github.io/1-188/">OSCHINA答读者问之三：架构是否就是把问题域理清楚？软件工程各要素可有比重？</a></li>
<li><a href="http://aimingoo.github.io/1-189/">OSCHINA答读者问之四：如何做好团队建设以及提高个人领导力？</a></li>
<li><a href="http://aimingoo.github.io/1-190/">OSCHINA答读者问之五：小作坊如何实施所谓的软件工程？</a></li>
<li><a href="http://aimingoo.github.io/1-191/">OSCHINA答读者问之六：杂谈（完结篇）</a></li>
</ul>
<h2 id="">【应用类】</h2>
<h3 id="pdf">PDF工具系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-62/">关于做PDF的FAQ（一）～（四）</a></li>
<li><a href="http://aimingoo.github.io/1-1726/">Kindle电子书中该用多大的图片</a></li>
<li><a href="http://aimingoo.github.io/1-1728/">在电子书中使用SVG</a></li>
</ul>
<h3 id="">博客迁移手记系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-1719/">手记1：迁移博客之全程工具</a></li>
<li><a href="http://aimingoo.github.io/1-1720/">手记2：从本地博客到Github Pages的最佳指南及工具</a></li>
<li><a href="http://aimingoo.github.io/1-1721/">手记3：实例教学之Ghost模板定制</a></li>
<li><a href="http://aimingoo.github.io/1-1722/">手记4：谈谈Gitment中泄露secret的前因后果与解决方法</a></li>
<li><a href="http://aimingoo.github.io/1-1723/">手记5：如何获得一个支持HTTPS的免费空间</a></li>
<li><a href="http://aimingoo.github.io/1-1725/">手记6：改造Gitment</a></li>
<li><a href="http://aimingoo.github.io/1-1724/">博客迁移手记之快速导航</a></li>
</ul>
<h3 id="monster">Monster使用系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-1741/">Monster - 用Ghost写博客的终极利器</a></li>
<li><a href="http://aimingoo.github.io/1-1743/">将Monster用作网站离线下载的方法</a></li>
<li><a href="http://aimingoo.github.io/1-1742/">详解Monster的初始化及配置</a></li>
<li><a href="http://aimingoo.github.io/1-1744/">Monster的三种工作模式</a></li>
</ul>
<h2 id="">【非技术类】</h2>
<h3 id="">坐而论道系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-205/">坐而论道（之一）</a></li>
<li><a href="http://aimingoo.github.io/1-206/">坐而论道（之二）</a></li>
<li><a href="http://aimingoo.github.io/1-211/">坐而论道（之三）</a></li>
<li><a href="http://aimingoo.github.io/1-219/">坐而论道（之四）</a></li>
<li><a href="http://aimingoo.github.io/1-259/">坐而论道（之五）：关于佛学中的“我”</a></li>
</ul>
<h2 id="">【其它/综合】</h2>
<h3 id="">旧文重发系列</h3>
<ul>
<li><a href="http://aimingoo.github.io/1-99/">旧文重发：程序员的一天</a></li>
<li><a href="http://aimingoo.github.io/1-100/">旧文重发：谈企业软件架构设计</a></li>
<li><a href="http://aimingoo.github.io/1-101/">旧文重发：产品线工程：团队迭代及其问题</a></li>
<li><a href="http://aimingoo.github.io/1-102/">旧文重发：程序员的七种武器</a></li>
<li><a href="http://aimingoo.github.io/1-103/">旧文重发：剑走偏锋：非主流的程序员</a></li>
<li><a href="http://aimingoo.github.io/1-104/">旧文重发：苹果是怎么吃到的？</a></li>
<li><a href="http://aimingoo.github.io/1-105/">旧文重发：做人、做事，做架构师——架构师能力模型解析</a></li>
</ul>
</div>]]></content:encoded></item><item><title><![CDATA[解决静态Blog中timeago显示问题的方法]]></title><description><![CDATA[<div class="kg-card-markdown"><p>因为使用的是Ghost博客的静态化页面，因此一篇文章发布到github上的时候显示的“发表于x分钟之前”，那么过了N多天再去看，还是这个“x分钟之前”。极不爽。所以，最近修改了一个timeAgo模块，用来搞定在静态博客中实时地显示timeAgo信息。</p>
<p>在页面中使用的时候也很简单，基本的做法是：</p>
<pre><code class="language-html">// 在页面中添加timeAgo模块
&lt;script src=&quot;https://aimingoo.github.io/assets/js/timeAgo.js&quot;&gt;&lt;/script&gt;

// 在需要显示的位置使用下面的代码
&lt;script&gt;document.writeln(timeAgo(&quot;DATETIME_OF_YOUR_POST&quot;))&lt;/script&gt;
</code></pre>
<p>在具体到Ghost的模板中使用的时候，会略有不同。</p>
<p><strong>1. 修改default.</strong></p></div>]]></description><link>http://aimingoo.github.io/1-1746/</link><guid isPermaLink="false">59dafc1a1e9aa777abb0d5c3</guid><category><![CDATA[Ghost]]></category><category><![CDATA[博客]]></category><category><![CDATA[Javascript]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Wed, 27 Sep 2017 10:10:47 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>因为使用的是Ghost博客的静态化页面，因此一篇文章发布到github上的时候显示的“发表于x分钟之前”，那么过了N多天再去看，还是这个“x分钟之前”。极不爽。所以，最近修改了一个timeAgo模块，用来搞定在静态博客中实时地显示timeAgo信息。</p>
<p>在页面中使用的时候也很简单，基本的做法是：</p>
<pre><code class="language-html">// 在页面中添加timeAgo模块
&lt;script src=&quot;https://aimingoo.github.io/assets/js/timeAgo.js&quot;&gt;&lt;/script&gt;

// 在需要显示的位置使用下面的代码
&lt;script&gt;document.writeln(timeAgo(&quot;DATETIME_OF_YOUR_POST&quot;))&lt;/script&gt;
</code></pre>
<p>在具体到Ghost的模板中使用的时候，会略有不同。</p>
<p><strong>1. 修改default.hbs</strong></p>
<p>将下面的代码插入页面合适的位置以加载timeAgo模块：</p>
<pre><code class="language-html">&lt;!-- 将timeAgo.js置入模板的assets目录 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;{{asset &quot;js/timeAgo.js&quot;}}&quot;&gt;&lt;/script&gt;

&lt;!-- 或使用在线的版本 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://aimingoo.github.io/assets/js/timeAgo.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>如果你的模板有自己的初始化代码（一般放在<code>assets/js/index.js</code>文件中），应该将这行代码插入在初始化代码之前。</p>
<p><strong>2. 修改post.hbs</strong></p>
<p>在<code>post.hbs</code>中找到显示一个Post的日期的位置。它可能使用如下代码（缺省使用Ghost内置的timeago方法显示）：</p>
<pre><code class="language-bash">{{date published_at timeago=&quot;true&quot;}}
</code></pre>
<p>根据你打算在<code>post.hbs</code>使用该值的不同方法，可以直接输出，也可以在页面加载之后重置这个值。</p>
<p>如果是直接在该页面中输出，则将上面的改为：</p>
<pre><code class="language-html">&lt;script&gt;document.writeln(timeAgo(&quot;{{date published_at format='YYYY-MM-DDTHH:mm:ss.sssZ'}}&quot;))&lt;/script&gt;
</code></pre>
<p>注意上面的代码中，我们是用format参数来取得更加精确的时间值（而不是直接使用timeago格式的值）。</p>
<p><strong>3. 如果采用延迟加载的方法</strong></p>
<p>如果这个值是采用延迟加载的方法来显示的，那么它可能放在<code>post.hbs</code>的一对标签中。类似：</p>
<pre><code class="language-html">&lt;time class=&quot;post-date&quot; datetime=&quot;{{date format='YYYY-MM-DDTHH:mm:ss.sssZ'}}&quot; timeago=&quot;true&quot;&gt;&lt;/time&gt;
</code></pre>
<p>注意这里的<code>timeago</code>只是一个html标签属性——这个属性是我添加的，用来标示这个<code>&lt;time&gt;</code>标签将采用<code>timeago</code>方式显示。</p>
<p>在延迟加载的情况下，通常是在全局的ready回调中做一些针对当前页面的规格化操作。它可能通过在<code>default.hbs</code>中加载一个<code>.js</code>文件来进入。以我们上面说到过的例子，假如在<code>assets/js/index.js</code>文件中，那么它可能的代码是：</p>
<pre><code class="language-javascript">$(document).ready(function() {
  ...
})
</code></pre>
<p>在这个代码块中，加入下面的代码即可：</p>
<pre><code class="language-javascript">// 列出所有'class=&quot;post-date&quot;的标签
$(&quot;.post-date&quot;).each(function() {
    // 检查上面添加的'timeago'属性值是否为'true'
    if ($(this).attr(&quot;timeago&quot;) == &quot;true&quot;) {
        // 从'datetime'属性中取时间值，用timeAgo()转换并回写到当前标签中
        $(this).text(timeAgo($(this).attr(&quot;datetime&quot;)));
    }
});
</code></pre>
</div>]]></content:encoded></item><item><title><![CDATA[怎么会有两个“原本”]]></title><description><![CDATA[<div class="kg-card-markdown"><p>今天很突然地发现裘宗燕老师还翻译了一本《编程原本》，英文名是&quot;Elements of Programming&quot;，是C++的STL库之父Alexander Stepanov，简单地说就是“一个大牛”。而看到这个书名的时候，就是一惊：撞衫撞脸撞书名，我那本《程序原本》的英文名原本也是打算用&quot;Elements of Programming&quot;的呀。</p>
<p><img src="http://aimingoo.github.io/content/images/2017/09/two_elements.png" alt="two_elements"></p>
<blockquote>
<p>这两本书的介绍在这里：</p>
<ul>
<li>《编程原本》<a href="https://book.douban.com/subject/7564093/">https://book.douban.com/subject/7564093/</a></li>
<li>《程序原本》<a href="http://blog.csdn.net/aimingoo/article/details/75506782">http://blog.csdn.net/aimingoo/article/details/75506782</a></li>
</ul>
</blockquote>
<p>Alex这本书是2009年出的，中文版则等到了2012年。所以我写《大道至易》的时候并不知道这本书，这很正常。到2012年《大道至易》</p></div>]]></description><link>http://aimingoo.github.io/1-1745/</link><guid isPermaLink="false">59dafc1a1e9aa777abb0d5c2</guid><category><![CDATA[程序原本]]></category><category><![CDATA[书序书评]]></category><category><![CDATA[读书]]></category><category><![CDATA[杂谈]]></category><dc:creator><![CDATA[aimingoo]]></dc:creator><pubDate>Sun, 24 Sep 2017 10:53:20 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>今天很突然地发现裘宗燕老师还翻译了一本《编程原本》，英文名是&quot;Elements of Programming&quot;，是C++的STL库之父Alexander Stepanov，简单地说就是“一个大牛”。而看到这个书名的时候，就是一惊：撞衫撞脸撞书名，我那本《程序原本》的英文名原本也是打算用&quot;Elements of Programming&quot;的呀。</p>
<p><img src="http://aimingoo.github.io/content/images/2017/09/two_elements.png" alt="two_elements"></p>
<blockquote>
<p>这两本书的介绍在这里：</p>
<ul>
<li>《编程原本》<a href="https://book.douban.com/subject/7564093/">https://book.douban.com/subject/7564093/</a></li>
<li>《程序原本》<a href="http://blog.csdn.net/aimingoo/article/details/75506782">http://blog.csdn.net/aimingoo/article/details/75506782</a></li>
</ul>
</blockquote>
<p>Alex这本书是2009年出的，中文版则等到了2012年。所以我写《大道至易》的时候并不知道这本书，这很正常。到2012年《大道至易》发行的时候，我在“程序原本”这一篇上用的标题是“程序源流”，是再到后来把这一部分独立成书并打算出电子版的时候，才用回到更早拟的名字，也就是《程序原本》。</p>
<p>于是现在就有了两个“原本”：《编程原本》和《程序原本》。</p>
<p>我仔细读了读Alex的《编程原本》，感叹于裘宗燕老师精准的翻译——是的，没错，这本书确实应该叫“编程（Programming）原本”。Alex在讲的，根本就不是“程序是怎么一回事”，而是“怎么写出好程序”——编程源于数学，因而可以从一个数学系统的构建和演进来理解编程的精髓，并“（或许就是）希望基于这种思维方法和开发技术，为范围广泛的软件系统建立起坚实基础”。由于这样的观念，Alex的《编程原本》中的数学系统既不是严格学术上的数学，也不是一般含义上的计算机系统。</p>
<p>在书中，Alex用于定义/构建数学系统的篇幅很小，也就是第一章（“基础”，14页）。而在这14页中，用于讨论“数/数据”的篇幅更少，大概只有3~4个小节。在全书接下来的篇幅中，Alex就基于这样的数学系统开始设计和分析算法，并以之解决实际问题了。</p>
<p>这与我在《程序原本》中讲述的内容与方法完全不同，并且存在着根本观念上的不同。在《程序原本》的第一个小节中，我就通过一个断言“算是程序之表，数是程序之本”，将整本书定调在了对“数”的讨论之中。由数的结构化延伸到算的结构化，以及后面的应用和系统的结构化，其本质上是在讨论：如今在“程序”中出现的种种元素，无非是大家在“结构化”这一个求解方向上的所得。因此我才在《我的架构思想》中提出了我对这所有观察作出的结论：程序是可被组织的元素。并由此提出进一步的观点：结构化——只是“程序是什么”的一个解，而绝非唯一解。</p>
<p>所以，我其实是在讨论“程序（Program）的原本”，而Alex在讨论的是“编程（Programming）的原本”。正是因此，《程序原本》中看到的就是数据，或者结构化视角下的可组织元素；《编程原本》中看到的就是数学系统，以及由此构建的算法与实现。</p>
<p>在<code>算法 + 数据结构 = 程序</code>这个经典的描述中，我讨论的是“数据结构”的问题，并进一步的讨论了“对数据、算法和程序的结构化”的问题，而Alex讨论的是算法问题。源于这种分析问题的剖面不同，Alex的《编程原本》要求读者有较高的数学基础，而《程序原本》则几乎对此没有什么要求——所以你看我在致谢中就只感谢了“我的小学数学老师”。^^.</p>
<p>不过《程序原本》要求你有很好的抽象思维能力，你可以把整本书看成一个完整的抽象思维与论证的训练——如何拿着最基础、简单的“数”的概念与原则，构建出对整个的系统描述。这本书回顾了你所有见到过的“程序”的样子，以及这些“样子”背后的逻辑，但是却并不教你写一行有效的代码、一个有用的算法，或者一个看起来有明确运行逻辑的系统。</p>
<p>算是程序之表，数是程序之本。</p>
<blockquote>
<p>又：</p>
<p>我最终觉得我在这本书的英文译名上还是犯了“严重且不可饶恕的错误”，所以只好悻悻然地将所有已经用过英文名的地方（例如github上）都进行了修改。我的《程序原本》这本书，今后就只用*&quot;Elements of Program&quot;*这个英文的书名吧。</p>
<p>好象更确切的译法是*“Elements of Programs”<em>？比如“算法 + 数据结构 = 程序”原书名就是</em>&quot;Algorithms + Data Structures = Programs&quot;*。算了，就这样吧！我的英文还没有好到可以较真这个东西的地步😹</p>
</blockquote>
</div>]]></content:encoded></item></channel></rss>
